package com.dev.STB;

import java.awt.AWTException;
import java.io.IOException;
import java.util.List;

import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.testng.Assert;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;

import com.github.javafaker.Faker;
import com.github.javafaker.Name;

import baseClass.BaseClass;
import constants.Constants;
import pages.STBAutomationSignInPage;
import pages.STBAutomationSignUpPage;
import pages.STBAutomationSignUpSecondPage;
import pages.ValidateNewRemittanceButtonFunctionPage;
import pages.AccountsSetupNewMTOVendorPage;
import pages.AddNewBusinessReceiversPage;
import pages.AddNewBusinessSendersPage;
import pages.AddNewIndividualReceiversPage;
import pages.AddNewIndividualSendersPage;
import pages.ClientDropdownValidationPage;
import pages.CreateNewUserRolePage;
import pages.MTOVendorFirstLoginPage;
import pages.YopMail;
import pages.RemittanceDropdownValidationPage;

public class STBAutomationMTOVendorSignup extends BaseClass {
	Faker faker = new Faker();
	public static String mail;
	public static String mtoName;

	private STBAutomationSignInPage stbAutomationPage;
	private STBAutomationSignUpPage stbAutomationSignUpPage;
	private STBAutomationSignUpSecondPage stbAutomationSecondSignUp;
	private MTOVendorFirstLoginPage mtoVendorFirstLoginPage;
	private ClientDropdownValidationPage clientDropdownValidationPage;
	private AddNewIndividualSendersPage addNewIndividualSender;
	private AddNewBusinessSendersPage addNewBusninessSender;
	private AddNewIndividualReceiversPage addNewIndividualReceiver;
	private AddNewBusinessReceiversPage addNewBusinessReceiver;
	private RemittanceDropdownValidationPage remittanceDropdownValidation;
	private ValidateNewRemittanceButtonFunctionPage validateNewRemittanceButton;
	private AccountsSetupNewMTOVendorPage accountsSetupNewMTOVendorPage;
	private CreateNewUserRolePage createNewUserRolePage;

	@BeforeMethod(alwaysRun = true)
	public void setUp() {
		logger.info("Initial setup is in progress");
		stbAutomationPage = new STBAutomationSignInPage(driver);
	}

	@Test(priority = 0,enabled = true)
	public void MTOVendorSignUp() throws AWTException, InterruptedException {
		logger.info("Fill the details in signup page and succesfully signup");
		stbAutomationPage.clickSignupButton();
		logger.info("User Clicked on signup button");
		// signup page
		stbAutomationSignUpPage = new STBAutomationSignUpPage(driver);
		logger.info("Checking First name box is present");
		Assert.assertTrue(stbAutomationSignUpPage.CheckMTOSignupFirstNameBox(), "First name box is displayed");
		logger.info("First name box is present");
		logger.info("Checking Last name box is present");
		Assert.assertTrue(stbAutomationSignUpPage.CheckMTOSignupLastNameBox(), "Last name box is displayed");
		logger.info("Last name box is present");
		logger.info("Checking Email box is present");
		Assert.assertTrue(stbAutomationSignUpPage.CheckMTOSignupEmailBox(), "Email box is displayed");
		logger.info("Email box is present");
		logger.info("Checking DOB box is present");
		Assert.assertTrue(stbAutomationSignUpPage.CheckMTOSignupDOBBox(), "DOB box is displayed");
		logger.info("DOB box is present");
		stbAutomationSignUpPage.enterFirstname(Constants.firstname);
		stbAutomationSignUpPage.enterLastname(Constants.lastname);
		mail = faker.name().firstName() + ".stb987@yopmail.com";
		stbAutomationSignUpPage.enterEmailId(mail);
		stbAutomationSignUpPage.enterDob();
		logger.info("Checking MTO signup Next button is enabled");
		Assert.assertTrue(stbAutomationSignUpPage.CheckMTOSignupNextbutton(), "Next button is Enabled");
		logger.info("MTO signup next button is enabled");
		stbAutomationSignUpPage.clickNextButton();
		// Signup second page
		stbAutomationSecondSignUp = new STBAutomationSignUpSecondPage(driver);
		logger.info("Checking MTO name box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupMTONameBox(), "MTO name box is displayed");
		logger.info("MTO name box is present");
		logger.info("Checking Country box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupCountryBox(), "Country box is displayed");
		logger.info("Country box is present");
		logger.info("Checking province box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupProvince(), "Province box is displayed");
		logger.info("Province box is present");
		logger.info("Checking city name box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupCityBox(), "City box is displayed");
		logger.info("City box is present");
		logger.info("Checking postal code box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupPostalCodeBox(), "Postal code box is displayed");
		logger.info("Postal code box is present");
		logger.info("Checking phone number box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupPhoneBox(), "Phone number box is displayed");
		logger.info("phone number box is present");
		logger.info("Checking TimeZone box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupTimeZoneBox(), "TimeZone box is displayed");
		logger.info("TimeZone box is present");
		logger.info("Checking Address box is present");
		Assert.assertTrue(stbAutomationSecondSignUp.CheckMTOSignupAddress(), "Address box is displayed");
		logger.info("Address box is present");
		mtoName=faker.name().firstName();
		stbAutomationSecondSignUp.enterMtoName(mtoName);
		System.out.println(mtoName);
		stbAutomationSecondSignUp.selectCountry();
		stbAutomationSecondSignUp.selectProvince();
		stbAutomationSecondSignUp.selectCity();
		stbAutomationSecondSignUp.enterPostalCode(Constants.postalcode);
		stbAutomationSecondSignUp.enterPhoneNum(Constants.phonenum);
		stbAutomationSecondSignUp.selectTimezone();
		stbAutomationSecondSignUp.enterAddress(faker.address().fullAddress());	
		stbAutomationSecondSignUp.clickAcceptTermsAndCondition();
		stbAutomationSecondSignUp.clickSignUpButton();
		logger.info("Checking success message on temporary password has been emailed ");
		Assert.assertEquals(stbAutomationSecondSignUp.checkSuccessMessage(), "A temporary password has been emailed","Verifying Password setting");
		logger.info("success message on temporary password has been emailed is displayed");
		YopMail YopMail=new YopMail(driver);
		YopMail.launchYopMail(driver);
		YopMail.enterEmail(mail);
    	YopMail.switchToFrameYopMail(driver);
		YopMail.clickSetPassword();
		YopMail.switchToNewPasswordWindow(driver);
		YopMail.setNewPassword();
		YopMail.clickChanagePassword();
		logger.info("Checking password updating success message");
		Assert.assertEquals(YopMail.checkSuccessToastMessage(),"Congratulations, your password has been successfully updated", "Verifying the Success Message");
		logger.info("Password updating success message is displayed");
	}
	
	@Test(priority = 1,enabled = true, dependsOnMethods = "MTOVendorSignUp")
	public void NewMTOVendorFirstLogin() throws IOException {
		logger.info("NewMTOVendor FirstLogin with valid credentials");
		mtoVendorFirstLoginPage = new MTOVendorFirstLoginPage(driver);
		mtoVendorFirstLoginPage.enterUserEmailId(mail);
		mtoVendorFirstLoginPage.enterPassword(Constants.commonPassword);
		mtoVendorFirstLoginPage.clickSignupButton();
		logger.info("Verifying signed in successfully message");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkSuccessMessage(), "Signed in successfully");
		logger.info("Verified signed in sucessfullly message");
		logger.info("Verifying welcome message");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkWelcomeMessage(), "Welcome to Spend The Bits!");
		logger.info("Verified welcome message");
		logger.info("Checking content message one is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkContentMessage1(),"Please note down your secret key in a safe place. This key can be used to access/transfer all your funds to anybody.");
		logger.info("Content message one is displayed");
		logger.info("Checking content message two is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkContentMessage2(),"Please keep this hand written in a safe place and DO NOT share this with anybody you do not trust with your funds.");
		logger.info("Content message two is displayed");
		logger.info("Checking content message three is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkContentMessage3(),"Please note that no one, including Spend The Bits officials can help to recover your funds if you lose this key.");
		logger.info("Content message three is displayed");
		mtoVendorFirstLoginPage.clickCopyButton();
		logger.info("Checking PassPharse copied sucessfully message is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkAfterCopySuccessMessage(), "PassPhrase copied successfully!");
		logger.info("PassPhrase copied successfully message displayed");
	    mtoVendorFirstLoginPage.CopySecterkey1ToExcelFile();
		mtoVendorFirstLoginPage.clickTermsButton();
		mtoVendorFirstLoginPage.clickContinueButton();
		logger.info("Checking wallet created succesfully message is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkWalletCreatedSuccessMessage(), "Wallets created successfully");
		logger.info("Wallet created successfully message is displayed");
		logger.info("Checking Popupbox2 header message is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkPopupBox2Header(), "Congratulations, we're all set!");
		logger.info("Popupbox2 box header message is displayed");
		logger.info("Checking Popupbox2 welcome message is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.checkPopupBox2WelcomeMsg(),"Welcome to a journey of next-gen transactions. You are all set to go.");
		logger.info("Popupbox2 welcome message is displayed");
		logger.info("Checking Popupbox2 content message one is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.popupBox2ContentMessage1(),"Please note down your XRPL address which stores all your funds. This is not a secret and can be re accessed via the Profile section in accounts.");
		logger.info("Popupbox2 content message one is displayed ");
		logger.info("Checking Popupbox2 content message two is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.popupBox2ContentMessage2(),"To activate your wallet, you need to deposit a minimum of 10XRP to this XRPL address. To know why this is needed click here.");
		logger.info("Popupbox2 content message two is displayed");
		logger.info("Checking Popupbox three is display");
		Assert.assertEquals(mtoVendorFirstLoginPage.popupBox2ContentMessage3(),"For your convenience, STB also provides an option to fund your wallet from SpendTheBits for an easy start. You need to make a payment worth 10XRP for us to fund the XRP and activate Your wallet.");
		logger.info("Popupbox three is displayed");
		logger.info("Checking QR code is display");
		Assert.assertTrue(mtoVendorFirstLoginPage.checkQRCode(), "QR code Displayed.");
		logger.info("QR code is displayed");
		mtoVendorFirstLoginPage.clickCopyButton2();
		logger.info("Checking Address copied message successfully is display");
	mtoVendorFirstLoginPage.CopySecterkey2ToExcelFile();
		Assert.assertEquals(mtoVendorFirstLoginPage.addressSuccessMessage(), "Address copied successfully!");
		logger.info("Address copied message successfully is displayed");
		logger.info("Checking wallet activate button is enabled");
		Assert.assertTrue(mtoVendorFirstLoginPage.checkWalletActivateButton(), "WalletActivateButton is Enabled");
		logger.info("Wallet activate button is enabled");
		logger.info("Checking Already activate button is enabled");
		Assert.assertTrue(mtoVendorFirstLoginPage.checkAlreadyActivateButton(), "AlreadyActivateButton is Enabled");
		logger.info("Already activate buttons is enabled");
		logger.info("Checking Later activate button is enabled");
		Assert.assertTrue(mtoVendorFirstLoginPage.checkLaterButton(), "LaterActivateButton is Enabled");
		logger.info("Later activate button is enabled");
	}

	@Test(priority = 2, enabled = true,dependsOnMethods = "NewMTOVendorFirstLogin")
	public void NewMTOuserAccountSetup() throws IOException {
		logger.info("NewMTOuserAccountSetup");
		accountsSetupNewMTOVendorPage=new AccountsSetupNewMTOVendorPage(driver);
		accountsSetupNewMTOVendorPage.enterUserEmailId(mail);
		accountsSetupNewMTOVendorPage.enterPassword(Constants.commonPassword);
		accountsSetupNewMTOVendorPage.clickSignupButton();
		accountsSetupNewMTOVendorPage.clickAccountsDropdown();
		accountsSetupNewMTOVendorPage.clickCurrenciesButton();
		accountsSetupNewMTOVendorPage.clickCurrencyActivateButton();
		accountsSetupNewMTOVendorPage.enterPassPhraseSecretKey();
		accountsSetupNewMTOVendorPage.clickCurrencySubmitButton();
		accountsSetupNewMTOVendorPage.KeyVerificationSuccessMessage();
		accountsSetupNewMTOVendorPage.clickLiquidityButton();
		accountsSetupNewMTOVendorPage.clickAddLiquidityButton();
		accountsSetupNewMTOVendorPage.enterLiquidityAmountInputbox();
		accountsSetupNewMTOVendorPage.enterLiquidityRemarksInputbox();
		accountsSetupNewMTOVendorPage.clickRequestButton();
		accountsSetupNewMTOVendorPage.clickConfigurationDropdown();
		accountsSetupNewMTOVendorPage.clickExchangeOffersButton();
		accountsSetupNewMTOVendorPage.clickNewCurrencyButton();
		accountsSetupNewMTOVendorPage.enterBaseCurrencyValue();
		accountsSetupNewMTOVendorPage.enterCurrencyRate();
		accountsSetupNewMTOVendorPage.clickAddButton();
		accountsSetupNewMTOVendorPage.clickSetupTrustlineLink();
		accountsSetupNewMTOVendorPage.clickCurrencyActivateButton();
		accountsSetupNewMTOVendorPage.enterPassPhraseSecretKey();
		accountsSetupNewMTOVendorPage.clickCurrencySubmitButton();
		accountsSetupNewMTOVendorPage.clickConfigurationDropdown();
		accountsSetupNewMTOVendorPage.clickFeesDropdown();
		accountsSetupNewMTOVendorPage.clickInwardRemittanceFeesButton();
		accountsSetupNewMTOVendorPage.clickNewSlabButton();
		accountsSetupNewMTOVendorPage.enterNewSlabFromValue();
		accountsSetupNewMTOVendorPage.enterNewSlabToValue();
		accountsSetupNewMTOVendorPage.enterNewSlabFixedCost();
		accountsSetupNewMTOVendorPage.enterNewSlabPercentageCharge();
		accountsSetupNewMTOVendorPage.clickAddButton();
		
		accountsSetupNewMTOVendorPage.clickOutwardRemittanceFeesButton();
		accountsSetupNewMTOVendorPage.clickNewSlabButton();
		accountsSetupNewMTOVendorPage.enterNewSlabFromValue();
		accountsSetupNewMTOVendorPage.enterNewSlabToValue();
		accountsSetupNewMTOVendorPage.enterNewSlabFixedCost();
		accountsSetupNewMTOVendorPage.enterNewSlabPercentageCharge();
		accountsSetupNewMTOVendorPage.clickAddButton();
	}

	@Test(priority = 7, enabled = false)
	public void ValidateClientDropdown() {
		logger.info("This is to validate the client dropdowns");
		clientDropdownValidationPage = new ClientDropdownValidationPage(driver);
		clientDropdownValidationPage.enterUserEmailId(mail);
		clientDropdownValidationPage.enterPassword(Constants.commonPassword);
		clientDropdownValidationPage.clickSignupButton();
		clientDropdownValidationPage.clickClientDropdownButton();
		logger.info("Checking sender button is present");
		Assert.assertTrue(clientDropdownValidationPage.checkSenderButtonIsDisplayed(), "Sender button is displayed");
		logger.info("Sender button is present");
		logger.info("Checking Receiver button is present");
		Assert.assertTrue(clientDropdownValidationPage.checkReceiverButtonIsDisplayed(),"Receiver button is displayed");
		logger.info("Receiver button is present");
		clientDropdownValidationPage.clickSenderButton();
		logger.info("Checking Sender Individual button is present");
		Assert.assertTrue(clientDropdownValidationPage.checkSenderIndividualButtonIsDisplayed(),"SenderIndividual button is displayed");
		logger.info("Sender Individual button is present");
		logger.info("Checking Sender Business button is present");
		Assert.assertTrue(clientDropdownValidationPage.checkSenderBusinessButtonIsDisplayed(),"SenderBusiness button is displayed");
		logger.info("Sender Business button is present");
		clientDropdownValidationPage.clickSenderIndividualButton();
		logger.info("Checking Individual Sender Client page header is present");
		Assert.assertEquals(clientDropdownValidationPage.CheckindividualSenderClientPage(), "Individual Senders");
		logger.info("Individual Sender client page header is present");
		clientDropdownValidationPage.clickSenderBusinessButton();
		logger.info("Checking Business Sender client page header is present");
		Assert.assertEquals(clientDropdownValidationPage.CheckBusinessSenderClientPage(), "Business Senders");
		logger.info("Business sender client page header is present");
		clientDropdownValidationPage.clickReceiverButton();
		logger.info("Checking Receiver Individual button is present");
		Assert.assertTrue(clientDropdownValidationPage.checkReceiverIndividualButtonIsDisplayed(),"ReceiverIndividual button is displayed");
		logger.info("Receiver Individual button is present");
		logger.info("Checking Receiver Individual button is present");
		Assert.assertTrue(clientDropdownValidationPage.ReceiverBusinessButtonIsDisplayed(),"ReceiverBusiness button is displayed");
		logger.info("Receiver Individual button is present");
		clientDropdownValidationPage.clickReceiverIndividualButton();
		logger.info("Checking Individual Receiver client page header is present");
		Assert.assertEquals(clientDropdownValidationPage.CheckindividualReceiverClientPage(), "Individual Receivers");
		logger.info("Individual Receiver client page header is present");
		clientDropdownValidationPage.clickReceiverBusinessButton();
		logger.info("Checking Business Receiver client page header is present");
		Assert.assertEquals(clientDropdownValidationPage.CheckBusinessReceiverClientPage(), "Business Receivers");
		logger.info("Business Receiver client page header is present");

	}
	@Test(priority = 3, enabled = false)
	public void NewUserAdministratorRoleCreation() throws IOException {
		logger.info("New User Administrator Role Creation ");
		createNewUserRolePage=new CreateNewUserRolePage(driver);
		createNewUserRolePage.enterUserEmailId(mail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickAdministrationDropdownButton();
		createNewUserRolePage.clickPortalUserButton();
		createNewUserRolePage.clickAddNewUserButton();
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		createNewUserRolePage.enterNewUserFirstName(firstname);
		createNewUserRolePage.enterNewUserLastName(lastName);
		String newUserMail = faker.name().firstName() + ".stb82852@yopmail.com";
		createNewUserRolePage.enterNewUserEmail(newUserMail);
		createNewUserRolePage.enterNewUserPhoneNumber(faker.number().digits(10));
		createNewUserRolePage.enterNewUserDOB(Constants.dob);
		createNewUserRolePage.enterNewUserRoleAdministrator();
		createNewUserRolePage.enterNewUserDocumentType();
		createNewUserRolePage.enterNewUserDocumentNumber(faker.number().digits(6));
		createNewUserRolePage.clickCreateNewUserButton();
		createNewUserRolePage.enterNewUserPassword(Constants.commonPassword);
		createNewUserRolePage.clickCreateNewUserSubmitButton();
		YopMail YopMail=new YopMail(driver);
		YopMail.launchYopMail(driver);
		YopMail.enterEmail(newUserMail);
    	YopMail.switchToFrameYopMail(driver);
		YopMail.clickSetPassword();
		YopMail.switchToNewPasswordWindow(driver);
		YopMail.setNewPassword();
		YopMail.clickChanagePassword();
		createNewUserRolePage.enterUserEmailId(newUserMail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickUserProfileDropdown();
		createNewUserRolePage.clickUserProfile();
		logger.info("Checking Administrator role is created or not ");
		Assert.assertEquals(createNewUserRolePage.VerifyUserRoleAsAdministrator(), mtoName+" (admin)");
		logger.info("Administrator role is created");
	}
	@Test(priority = 4, enabled = false)
	public void NewUserManagerRoleCreation() throws IOException {
		logger.info("New User Manager Role Creation ");
		createNewUserRolePage=new CreateNewUserRolePage(driver);
		createNewUserRolePage.enterUserEmailId(mail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickAdministrationDropdownButton();
		createNewUserRolePage.clickPortalUserButton();
		createNewUserRolePage.clickAddNewUserButton();
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		createNewUserRolePage.enterNewUserFirstName(firstname);
		createNewUserRolePage.enterNewUserLastName(lastName);
		String newUserMail = faker.name().firstName() + ".stb9132@yopmail.com";
		createNewUserRolePage.enterNewUserEmail(newUserMail);
		createNewUserRolePage.enterNewUserPhoneNumber(faker.number().digits(10));
		createNewUserRolePage.enterNewUserDOB(Constants.dob);
		createNewUserRolePage.enterNewUserRoleManager();
		createNewUserRolePage.enterNewUserDocumentType();
		createNewUserRolePage.enterNewUserDocumentNumber(faker.number().digits(6));
		createNewUserRolePage.clickCreateNewUserButton();
		createNewUserRolePage.enterNewUserPassword(Constants.commonPassword);
		createNewUserRolePage.clickCreateNewUserSubmitButton();
		YopMail YopMail=new YopMail(driver);
		YopMail.launchYopMail(driver);
		YopMail.enterEmail(newUserMail);
    	YopMail.switchToFrameYopMail(driver);
		YopMail.clickSetPassword();
		YopMail.switchToNewPasswordWindow(driver);
		YopMail.setNewPassword();
		YopMail.clickChanagePassword();
		createNewUserRolePage.enterUserEmailId(newUserMail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickUserProfileDropdown();
		createNewUserRolePage.clickUserProfile();
		logger.info("Checking Manager role is created or not ");
		Assert.assertEquals(createNewUserRolePage.VerifyUserRoleAsManager(), mtoName+" (manager)");
		logger.info("Manager role is created");
	}
	@Test(priority = 5, enabled = false)
	public void NewUserComplainceRoleCreation() throws IOException {
		logger.info("New User Complaince Role Creation ");
		createNewUserRolePage=new CreateNewUserRolePage(driver);
		createNewUserRolePage.enterUserEmailId(mail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickAdministrationDropdownButton();
		createNewUserRolePage.clickPortalUserButton();
		createNewUserRolePage.clickAddNewUserButton();
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		createNewUserRolePage.enterNewUserFirstName(firstname);
		createNewUserRolePage.enterNewUserLastName(lastName);
		String newUserMail = faker.name().firstName() + ".stb9643@yopmail.com";
		createNewUserRolePage.enterNewUserEmail(newUserMail);
		createNewUserRolePage.enterNewUserPhoneNumber(faker.number().digits(10));
		createNewUserRolePage.enterNewUserDOB(Constants.dob);
		createNewUserRolePage.enterNewUserRoleComplaince();
		createNewUserRolePage.enterNewUserDocumentType();
		createNewUserRolePage.enterNewUserDocumentNumber(faker.number().digits(6));
		createNewUserRolePage.clickCreateNewUserButton();
		createNewUserRolePage.enterNewUserPassword(Constants.commonPassword);
		createNewUserRolePage.clickCreateNewUserSubmitButton();
		YopMail YopMail=new YopMail(driver);
		YopMail.launchYopMail(driver);
		YopMail.enterEmail(newUserMail);
    	YopMail.switchToFrameYopMail(driver);
		YopMail.clickSetPassword();
		YopMail.switchToNewPasswordWindow(driver);
		YopMail.setNewPassword();
		YopMail.clickChanagePassword();
		createNewUserRolePage.enterUserEmailId(newUserMail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickUserProfileDropdown();
		createNewUserRolePage.clickUserProfile();
		logger.info("Checking Manager role is created or not ");
		Assert.assertEquals(createNewUserRolePage.VerifyUserRoleAsComplaince(), mtoName+" (compliance)");
		logger.info("Complaince role is created");
	}
	@Test(priority = 6, enabled = false)
	public void NewUserOperatorRoleCreation() throws IOException {
		logger.info("New User Operator Role Creation ");
		createNewUserRolePage=new CreateNewUserRolePage(driver);
		createNewUserRolePage.enterUserEmailId(mail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickAdministrationDropdownButton();
		createNewUserRolePage.clickPortalUserButton();
		createNewUserRolePage.clickAddNewUserButton();
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		createNewUserRolePage.enterNewUserFirstName(firstname);
		createNewUserRolePage.enterNewUserLastName(lastName);
		String newUserMail = faker.name().firstName() + ".stb9844@yopmail.com";
		createNewUserRolePage.enterNewUserEmail(newUserMail);
		createNewUserRolePage.enterNewUserPhoneNumber(faker.number().digits(10));
		createNewUserRolePage.enterNewUserDOB(Constants.dob);
		createNewUserRolePage.enterNewUserRoleOperator();
		createNewUserRolePage.enterNewUserDocumentType();
		createNewUserRolePage.enterNewUserDocumentNumber(faker.number().digits(6));
		createNewUserRolePage.clickCreateNewUserButton();
		createNewUserRolePage.enterNewUserPassword(Constants.commonPassword);
		createNewUserRolePage.clickCreateNewUserSubmitButton();
		YopMail YopMail=new YopMail(driver);
		YopMail.launchYopMail(driver);
		YopMail.enterEmail(newUserMail);
    	YopMail.switchToFrameYopMail(driver);
		YopMail.clickSetPassword();
		YopMail.switchToNewPasswordWindow(driver);
		YopMail.setNewPassword();
		YopMail.clickChanagePassword();
		createNewUserRolePage.enterUserEmailId(newUserMail);
		createNewUserRolePage.enterPassword(Constants.commonPassword);
		createNewUserRolePage.clickSignupButton();
		createNewUserRolePage.clickUserProfileDropdown();
		createNewUserRolePage.clickUserProfile();
		logger.info("Checking Manager role is created or not ");
		Assert.assertEquals(createNewUserRolePage.VerifyUserRoleAsOperator(), mtoName+" (operator)");
		logger.info("Operator role is created");
	}



	@Test(priority = 8,enabled = false)
	public void ValidateAddNewIndividualSender() throws AWTException, InterruptedException {
		logger.info("This is to validate the New individual senders");
		addNewIndividualSender = new AddNewIndividualSendersPage(driver);
		addNewIndividualSender.enterUserEmailId(mail);
		addNewIndividualSender.enterPassword(Constants.commonPassword);
		addNewIndividualSender.clickSignupButton();
		addNewIndividualSender.clickClientDropdownButton();
		addNewIndividualSender.clickSenderButton();
		addNewIndividualSender.clickSenderIndividualButton();
		// Validation of Individual senders page info
		logger.info("Checking Individual sender Title is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderTitle(), "View your individual sender clients");
		logger.info("Individual sender Title is present");
		logger.info("Checking Individual sender page Search box  is present");
		Assert.assertTrue(addNewIndividualSender.checkIndividualSenderSearchBoxIsPresent(),"Checking Individual Sender CLientPage SearchBox is present or not");
		logger.info("Individual sender Search box is present");
		logger.info("Checking Individual sender New Sender button is present");
		Assert.assertTrue(addNewIndividualSender.checkIndividualSenderPageNewSenderButtonIsPresent(),"Checking Individual Sender CLientPage NewSender button is present or not");
		logger.info("Individual sender New Sender button is present");
		logger.info("Checking Individual sender Page info ID is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoId(), "ID","Individual page Header Id is Present");
		logger.info("Individual sender Page info ID is present");
		logger.info("Checking Individual sender Page info Name is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoName(), "Name","Individual page Header Name is Present");
		logger.info("Individual sender Page info Name is present");
		logger.info("Checking Individual sender Page info Balance is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoBalance(), "Balance","Individual page Header Balance is Present");
		logger.info("Individual sender Page info Balance is present");
		logger.info("Checking Individual sender Page info Xrpl Tag is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoXrplTag(), "Xrpl Tag","Individual page Header Xrpl Tag is Present");
		logger.info("Individual sender Page info Xrpl Tag is present");
		logger.info("Checking Individual sender Page info City is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfocity(), "City","Individual page Header City is Present");
		logger.info("Individual sender Page info City is present");
		logger.info("Checking Individual sender Page info Province is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoProvince(), "Province","Individual page Header Province is Present");
		logger.info("Checking Individual sender Page info Status is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoStatus(), "Status","Individual page Header Status is Present");
		logger.info("Individual sender Page info Status is present");
		logger.info("Checking Individual sender Page info Phone Number is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoPhoneNum(), "Phone Number","Individual page Header PhoneNum is Present");
		logger.info("Individual sender Page info Phone Number is present");
		logger.info("Checking Individual sender Page info Email is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoMail(), "Email","Individual page Header Mail is Present");
		logger.info("Individual sender Page info Email is present");
		logger.info("Checking Individual sender Page info Actions is present");
		Assert.assertEquals(addNewIndividualSender.checkIndividualSenderPageInfoAction(), "Actions","Individual page Header Actions is Present");
		logger.info("Individual sender Page info Actions is present");
		
		// Validation of new sender page
		addNewIndividualSender.clickNewSenderButton();
		logger.info("Checking New Sender Firstname box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderFirstNameBox(),"Checking Creat New Sender FirstName is present or not");
		logger.info("New Sender Firstname box is present");
		logger.info("Checking New Sender Lastname box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderLastNameBox(),"Checking  Creat New Sender LastName is present or not");
		logger.info("New Sender Lastname box is present");
		logger.info("Checking New Sender PhoneNumber box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderPhoneNumBox(),"Checking Create New Sender PhoneBox is present or not");
		logger.info("New Sender PhoneNumber box is present");
		logger.info("Checking New Sender Province box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderProvinceBox(),"Checking Create New Sender ProvinceBox  is present or not");
		logger.info("New Sender Province box is present");
		logger.info("Checking New Sender City box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderCityBox(),"Checking Create New Sender CityBox is present or not");
		logger.info("New Sender City box is present");
		logger.info("Checking New Sender DOB box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderDOBBox(),"Checking Create New Sender DOBBox is present or not");
		logger.info("New Sender DOB box is present");
		logger.info("Checking New Sender Mail box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderMailBox(),"Checking Create New Sender MailBox is present or not");
		logger.info(" New Sender Mail box is present");
		logger.info("Checking New Sender Address box is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderAddressBox(),"Checking Create New Sender AddressBox is present or not");
		logger.info("New Sender Address box is present");
		logger.info("Checking New Sender Next Button is present");
		Assert.assertFalse(addNewIndividualSender.CheckNewSenderNextButton(),"Checking Create New Sender Next Button is present or not");
		logger.info("New Sender Next button is present");
		logger.info("Checking New Sender Cancel button is present");
		Assert.assertTrue(addNewIndividualSender.CheckNewSenderCancelButton(),"Checking Create New Sender Cancel Button is present or not");
		logger.info("New Sender Cancel button is present");
		// Validation after fill the new sender fields
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		addNewIndividualSender.enternewSenderFirstName(firstname);
		addNewIndividualSender.enternewSenderLastName(lastName);
		addNewIndividualSender.enternewSenderPhoneNum(faker.number().digits(10));
		addNewIndividualSender.enternewSenderProvince();
		addNewIndividualSender.enternewSenderCity();
		addNewIndividualSender.enternewSenderDOB();
		String IndSenderMail = faker.name().firstName() + "@yopmail.com";
		addNewIndividualSender.enternewSenderMail(IndSenderMail);
		String address = faker.address().fullAddress();
		addNewIndividualSender.enternewSenderAddress(address);
		addNewIndividualSender.clickNewSenderNextButton();
		// Validation of all types of finance type
		addNewIndividualSender.enternewSenderFinanceType1();
		logger.info("Checking New Sender Paypal Mail box is present");
		Assert.assertTrue(addNewIndividualSender.checknewSenderPaypalMailBoxIsEnabled(),"Checking Paypal mail textbox is present or not");
		logger.info("New Sender Paypal Mail box is present");
		addNewIndividualSender.enternewSenderFinanceType2();
		logger.info("Checking New Sender VenmoId box is present");
		Assert.assertTrue(addNewIndividualSender.ChecknewSenderVenmoIdBoxIsEnabled(),"Checking VenmoId textbox is present or not");
		logger.info("New Sender VenmoId box is present");
		addNewIndividualSender.enternewSenderFinanceType3();
		logger.info("Checking New Sender Bank Name box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankNameBoxIsEnabled(),"Checking BankName textbox is present or not");
		logger.info("New Sender Bank name  box is present");
		logger.info("Checking New Sender Account number box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankAccountNumBoxIsEnabled(),"Checking BankAccountNumBox textbox is present or not");
		logger.info("New Sender Account number box is present");
		logger.info("Checking New Sender Bank IBAN box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankIbanIsEnabled(),"Checking BankIban textbox is present or not");
		logger.info("New Sender Bank IBAN box is present");
		logger.info("Checking New Sender Swift BIC code box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankSwiftBICCodeBoxIsEnabled(),"Checking BankSwiftBICCode textbox is present or not");
		logger.info("New Sender Swift BIC code box is present");
		logger.info("Checking New Sender Bank Branch box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankBranchNumBoxIsEnabled(),"Checking BankBranchNumBox textbox is present or not");
		logger.info("New Sender Bank Branch number box is present");
		logger.info("Checking New Sender Transit number box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankTransitNumBoxIsEnabled(),"Checking BankTransitNumBox textbox is present or not");
		logger.info("New Sender Transit number box is present");
		logger.info("Checking New Sender ABARouting number box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankABARoutingNumIsEnabled(),"Checking BankABARoutingNum textbox is present or not");
		logger.info("New Sender Bank ABARouting number box is present");
		logger.info("Checking New Sender Bank IFSC code box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankIFSCIsEnabled(),"Checking BankIFSCIs textbox is present or not");
		logger.info("New Sender Bank IFSC code number box is present");
		logger.info("Checking New Sender Bank LEI code box is present");
		Assert.assertTrue(addNewIndividualSender.CheckbankLEICodeIsEnabled(),"Checking BankLEICode textbox is present or not");
		logger.info("New Sender Bank LEI code box is present");
		logger.info("Checking New Sender Bank Address box is present");
		Assert.assertTrue(addNewIndividualSender.CheckBankAddressIsEnabled(),"Checking BankAddress textbox is present or not");
		logger.info("New Sender Bank Address box is present");
		logger.info("Checking New Sender Cancel button is present");
		Assert.assertTrue(addNewIndividualSender.CheckCancelButtonIsEnabled(),"Checking Cancel button is present or not");
		logger.info("New Sender Cancel button is present");
		logger.info("Checking New Sender Back button is present");
		Assert.assertTrue(addNewIndividualSender.checkBackButtonIsEnabled(), "Checking Back button is present or not");
		logger.info("New Sender Back button is present");
		logger.info("Checking New Sender SaveAsDraft button is present");
		Assert.assertTrue(addNewIndividualSender.CheckSaveAsDraftButtonIsEnabled(),"Checking SaveAsDraft Button textbox is present or not");
		logger.info("New Sender SaveAsDraft button is present");
		logger.info("Checking New Sender SaveAndActive button is present");
		Assert.assertTrue(addNewIndividualSender.checkSaveAndActivateButtonIsEnabled(),"Checking SaveAndActivate is present or not");
		logger.info("New Sender SaveAndActive button is present");
		// Validation of finance type bank with filled all details
		addNewIndividualSender.enternewBankName(Constants.bankname);
		addNewIndividualSender.enterBankaccountNum(faker.number().digits(10));
		addNewIndividualSender.enterBankIBan(faker.number().digits(6));
		addNewIndividualSender.enterBankSwiftBICCode(faker.number().digits(4));
		addNewIndividualSender.enternewBankBranchNum(faker.number().digits(5));
		addNewIndividualSender.enterBankTransitNum(faker.number().digits(3));
		addNewIndividualSender.enterBankABARoutingNum(faker.number().digits(5));
		addNewIndividualSender.enterBankIFSCInum(faker.number().digits(4));
		addNewIndividualSender.enterBankLEINUM(faker.number().digits(4));
		addNewIndividualSender.enterBankAddress(Constants.bankaddress);
		addNewIndividualSender.clickBackButton();
		// Validation of next ,previous,saveasdraft,edit,saveandactive buttons
		addNewIndividualSender.clickNextButton();
		addNewIndividualSender.clickSaveAsDraftButton();
		logger.info("Checking Individual sender Page info Edit Button is present");
		Assert.assertTrue(addNewIndividualSender.CheckIndividualSenderPageEditButton(),"Checking Individual Sender CLientPage EditButton is present or not");
		logger.info("Individual sender Page info Edit button is present");
		addNewIndividualSender.clickEditButton(firstname, lastName);
		addNewIndividualSender.clickNextButton();
		addNewIndividualSender.enterBankaccountNum(faker.number().digits(1));
		addNewIndividualSender.clickSaveAndActivateButton();

	}

	@Test(priority = 9,enabled=false)
	public void ValidateAddNewBusinessSender() throws AWTException, InterruptedException {
		logger.info("This is to validate the New business senders");
		addNewBusninessSender = new AddNewBusinessSendersPage(driver);
		addNewBusninessSender.enterUserEmailId(mail);
		addNewBusninessSender.enterPassword(Constants.commonPassword);
		addNewBusninessSender.clickSignupButton();
		addNewBusninessSender.clickClientDropdownButton();
		addNewBusninessSender.clickSenderButton();
		addNewBusninessSender.clickSenderBusinessButton();
		// Validation of Business senders page info
		logger.info("Checking Business Sender Title is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderTitle(), "View your business sender clients");
		logger.info("Business Sender Title is present");
		logger.info("Checking Business sender page Search box  is present");
		Assert.assertTrue(addNewBusninessSender.checkBusinessSenderSearchBoxIsPresent(),"Checking Business Sender CLientPage SearchBox is present or not");
		logger.info("Checking Business sender page Search box  is present");
		logger.info("Checking Business sender New Sender button is present");
		Assert.assertTrue(addNewBusninessSender.checkBusinessSenderPageNewSenderButtonIsPresent(),"Checking Business Sender CLientPage NewSender button is present or not");
		logger.info("Business sender New Sender button is present");
		logger.info("Checking Business sender Page info ID is present");
        Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoId(), "ID","Business page Header Id is Present");
		logger.info("Business sender Page info ID is present");
		logger.info("Checking Business sender Page info Name is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoName(), "Name","Business page Header Name is Present");
		logger.info("Business sender Page info Name is present");
		logger.info("Checking Individual sender Page info Balance is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoBalance(), "Balance","Individual page Header Balance is Present");
		logger.info("Individual sender Page info Balance is present");
		logger.info("Checking Business sender Page info Xrpl is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoXrplTag(), "Xrpl Tag","Business page Header Xrpl Tag is Present");
		logger.info("Business sender Page info Xrpl is present");
		logger.info("Checking Business sender Page info City is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfocity(), "City","Business page Header City is Present");
		logger.info("Business sender Page info City is present");
		logger.info("Checking Business sender Page info Province is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoProvince(), "Province","Business page Header Province is Present");
		logger.info("Business sender Page info Province is present");
		logger.info("Checking Business sender Page info Status is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoStatus(), "Status","Business page Header Status is Present");
		logger.info("Business sender Page info Status is present");
		logger.info("Checking Business sender Page info Phone number is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoPhoneNum(), "Phone Number","Business page Header PhoneNum is Present");
		logger.info("Business sender Page info Phone number is present");
		logger.info("Checking Business sender Page info Email is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoMail(), "Email","Business page Header Mail is Present");
		logger.info("Business sender Page info Email is present");
		logger.info("Checking Business sender Page info Actions is present");
		Assert.assertEquals(addNewBusninessSender.checkBusinessSenderPageInfoAction(), "Actions","Business page Header Actions is Present");
		logger.info("Business sender Page info Actions is present");
		
		// Validation of new sender page
		addNewBusninessSender.clickNewSenderButton();
		logger.info("Checking New sender Business Name is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderBusinessNameBox(),"Checking Creat New Sender BusinessNameBox is present or not");
		logger.info("New sender Business Name is present");
		logger.info("Checking New sender First Name is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderFirstNameBox(),"Checking Create New Sender FirstNameBox is present or not");
		logger.info("New sender FirstName box is present");
		logger.info("Checking New sender Last Name is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderLastNameBox(),"Checking  Create New Sender LastNameBox is present or not");
		logger.info("New sender Lastname box  is present");
		logger.info("Checking New sender Designation box is present");
		Assert.assertTrue(addNewBusninessSender.checkPrimaryContactDesignationBox(),"Checking Create New Sender PhoneBox is present or not");
		logger.info("New sender Designation box is present");
		logger.info("Checking New sender Primary contact1 box is present");
        Assert.assertTrue(addNewBusninessSender.checkPrimaryContact1Box(),"Checking Create New Sender PhoneBox1 is present or not");
        logger.info("New sender Primary contact1 box is present");
        logger.info("Checking New sender Primary contact2 box is present");
		Assert.assertTrue(addNewBusninessSender.checkPrimaryContact2Box(),"Checking Create New Sender PhoneBox2 is present or not");
		logger.info("New sender Primary contact2 box is present");
		logger.info("Checking New sender Country box is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderCountryBox(),"Checking Create New Sender Country box  is present or not");
		logger.info("New sender Country box is present");
		logger.info("Checking New sender Province box is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderProvinceBox(),"Checking Create New Sender ProvinceBox  is present or not");
		logger.info("New sender Province box is present");
		logger.info("Checking New sender City box is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderCityBox(),"Checking Create New Sender CityBox is present or not");
		logger.info("New sender City box is present");
		logger.info("Checking New sender DOB box is present");
		Assert.assertTrue(addNewBusninessSender.CheckNewSenderDOBBox(),"Checking Create New Sender DOBBox is present or not");
		logger.info("New sender DOB box is present");
		logger.info("Checking New sender Mail box is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderMailBox(),"Checking Create New Sender MailBox is present or not");
		logger.info("New sender Mail box is present");
		logger.info("Checking New sender AddressBox box is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderAddressBox(),"Checking Create New Sender AddressBox is present or not");
		logger.info("New sender AddressBox box is present");
		logger.info("Checking New sender Next Button is present");
		Assert.assertFalse(addNewBusninessSender.checkNewSenderNextButton(),"Checking Create New Sender Next Button is present or not");
		logger.info("New sender Next button is present");
		logger.info("Checking New sender Cancel button is present");
		Assert.assertTrue(addNewBusninessSender.checkNewSenderCancelButton(),"Checking Create New Sender Cancel Button is present or not");
		logger.info("New sender Cancel button is present");
		// Validation after fill the new sender fields
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		String businessName = faker.name().firstName();
		addNewBusninessSender.enternewSenderBusinessName(businessName);
		addNewBusninessSender.enternewSenderFirstName(firstname);
		addNewBusninessSender.enternewSenderLastName(lastName);
		addNewBusninessSender.enternewSenderContactDesignation(Constants.designationcontact);
		addNewBusninessSender.enternewSenderPrimaryContact1(faker.number().digits(10));
		addNewBusninessSender.enternewSenderPrimaryContact2(faker.number().digits(10));
		addNewBusninessSender.enternewSenderProvince();
		addNewBusninessSender.enternewSenderCity();
		addNewBusninessSender.enternewSenderDOB();
		String BusSendermail = faker.name().firstName() + "@yopmail.com";
		addNewBusninessSender.enternewSenderMail(BusSendermail);
		String fullAddress = faker.address().fullAddress();
		addNewBusninessSender.enternewSenderAddress(fullAddress);
		addNewBusninessSender.clickNewSenderNextButton();
		addNewBusninessSender.enternewSenderBusinessFinanceType1();
		logger.info("Checking New Sender Paypal Mail box is present");
		Assert.assertTrue(addNewBusninessSender.checknewSenderPaypalMailBoxIsEnabled(),"Checking Paypal mail textbox is present or not");
		logger.info("New Sender Paypal Mail box is present");
		addNewBusninessSender.enternewSenderFinanceType2();
		logger.info("Checking New Sender Venmo Id box is present");
		Assert.assertTrue(addNewBusninessSender.ChecknewSenderVenmoIdBoxIsEnabled(),"Checking VenmoId textbox is present or not");
		logger.info("New Sender Venmo id box is present");
		addNewBusninessSender.enternewSenderFinanceType3();
		logger.info("Checking New Sender Bank name box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankNameBoxIsEnabled(),"Checking BankName textbox is present or not");
		logger.info("New Sender Paypal Bank name box is present");
		logger.info("Checking New Sender Bank account number box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankAccountNumBoxIsEnabled(),"Checking BankAccountNumBox textbox is present or not");
		logger.info("New Sender Bank account number box is present");
		logger.info("Checking New Sender Bank IBAN box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankIbanIsEnabled(),"Checking BankIban textbox is present or not");
		logger.info("New Sender Bank IBAN box is present");
		logger.info("Checking New SenderBank Swift BIC code box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankSwiftBICCodeBoxIsEnabled(),"Checking BankSwiftBICCode textbox is present or not");
		logger.info("New Sender Swift BIC code is present");
		logger.info("Checking New Sender Bank Breanch number box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankBranchNumBoxIsEnabled(),"Checking BankBranchNumBox textbox is present or not");
		logger.info("New Sender Bank Branch number box is present");
		logger.info("New Sender Bank Transit number box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankTransitNumBoxIsEnabled(),"Checking BankTransitNumBox textbox is present or not");
		logger.info("New Sender Bank Transit number box is present");
		logger.info("Checking New Sender ABA Routing number box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankABARoutingNumIsEnabled(),"Checking BankABARoutingNum textbox is present or not");
		logger.info("New SenderABA Routing number box is present");
		logger.info("Checking New Sender Bank IFSC code box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankIFSCIsEnabled(),"Checking BankIFSCIs textbox is present or not");
		logger.info("New Sender Bank IFSC code box is present");
		logger.info("Checking New Sender Bank LEI code is present");
		Assert.assertTrue(addNewBusninessSender.CheckbankLEICodeIsEnabled(),"Checking BankLEICode textbox is present or not");
		logger.info("New Sender Bank LEI code box is present");
		logger.info("Checking New Sender Bank Address box is present");
		Assert.assertTrue(addNewBusninessSender.CheckBankAddressIsEnabled(),"Checking BankAddress textbox is present or not");
		logger.info("New Sender Bank address box is present");
		logger.info("Checking New Sender Cancel button is present");
		Assert.assertTrue(addNewBusninessSender.CheckCancelButtonIsEnabled(),"Checking Cancel button is present or not");
		logger.info("New Sender Cancel button is present");
		logger.info("Checking New Sender Back button is present");
		Assert.assertTrue(addNewBusninessSender.checkBackButtonIsEnabled(), "Checking Back button is present or not");
		logger.info("New Sender Back button is present");
		logger.info("Checking New Sender SaveAsDraft button is present");
		Assert.assertTrue(addNewBusninessSender.CheckSaveAsDraftButtonIsEnabled(),"Checking SaveAsDraft Button textbox is present or not");
		logger.info("New Sender SaveAsDraft button is present");
		logger.info("Checking New Sender SaveAndActivate button is present");
		Assert.assertTrue(addNewBusninessSender.checkSaveAndActivateButtonIsEnabled(),"Checking SaveAndActivate is present or not");
		logger.info("New Sender SaveAndActivate button is present");
		// Validation of finance type bank with filled all details
		addNewBusninessSender.enternewBankName(Constants.bankname);
		addNewBusninessSender.enterBankaccountNum(faker.number().digits(10));
		addNewBusninessSender.enterBankIBan(faker.number().digits(6));
		addNewBusninessSender.enterBankSwiftBICCode(faker.number().digits(4));
		addNewBusninessSender.enternewBankBranchNum(faker.number().digits(5));
		addNewBusninessSender.enterBankTransitNum(faker.number().digits(3));
		addNewBusninessSender.enterBankABARoutingNum(faker.number().digits(5));
		addNewBusninessSender.enterBankIFSCInum(faker.number().digits(4));
		addNewBusninessSender.enterBankLEINUM(faker.number().digits(4));
		addNewBusninessSender.enterBankAddress(faker.address().fullAddress());
		addNewBusninessSender.clickBackButton();
		// Validation of next ,previous,saveasdraft,edit,saveandactive buttons
		addNewBusninessSender.clickNextButton();
		addNewBusninessSender.clickSaveAsDraftButton();
		logger.info("Checking Business sender Page EditButton is present");
		Assert.assertTrue(addNewBusninessSender.CheckBusinessSenderPageEditButton(),"Checking Business Sender CLientPage EditButton is present or not");
		logger.info("Business sender Page EditButton is present");
		addNewBusninessSender.clickEditButton(businessName);
		addNewBusninessSender.enternewSenderPrimaryContact2(faker.number().digits(10));
		addNewBusninessSender.clickNextButton();
		addNewBusninessSender.enterBankaccountNum(faker.number().digits(1));
		addNewBusninessSender.clickSaveAndActivateButton();
	}

	@Test(priority =10,enabled=false)
	public void ValidateAddNewIndividualReceiver() throws AWTException, InterruptedException {
		logger.info("This is to validate the New Individual Receivers");
		addNewIndividualReceiver = new AddNewIndividualReceiversPage(driver);
		addNewIndividualReceiver.enterUserEmailId(mail);
		addNewIndividualReceiver.enterPassword(Constants.commonPassword);
		addNewIndividualReceiver.clickSignupButton();
		addNewIndividualReceiver.clickClientDropdownButton();
		addNewIndividualReceiver.clickReceiverButton();
		addNewIndividualReceiver.clickReceiverIndividualButton();
		// Validation of Individual senders page info
		logger.info("Checking Individual Receiver Title is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverTitle(),"View your individual receiver clients");
		logger.info("Individual Receiver Title is present");
		logger.info("Checking Individual Receiver client page Search box is present");
		Assert.assertTrue(addNewIndividualReceiver.checkIndividualReceiverSearchBoxIsPresent(),"Checking Individual Sender CLientPage SearchBox is present or not");
		logger.info("Individual Receiver client page Search box is present");
		logger.info("Checking Individual Receiver client page New Receiver button is present");
		Assert.assertTrue(addNewIndividualReceiver.checkIndividualReceiverPageNewReceiverButtonIsPresent(),"Checking Individual Receiver ClientPage NewReceiver button is present or not");
		logger.info("Individual Receiver client page New Receiver button is present");
		logger.info("Checking Individual Receiver page info ID is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoId(), "ID","Individual page Header Id is Present");
		logger.info("Individual Receiver page info ID is present");
		logger.info("Checking Individual Receiver page info Name is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoName(), "Name","Individual page Header Name is Present");
		logger.info("Individual Receiver page info Name is present");
		logger.info("Checking Individual Receiver Xrpl Tag is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoXrplTag(), "Xrpl tag","Individual page Header Xrpl Tag is Present");
		logger.info("Individual Receiver page info Xrpl Tag is present");
		logger.info("Checking Individual Receiver Belongs To is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoBelongsTo(), "Belongs To","Individual page Header Belongs To is Present");
		logger.info("Individual Receiver page info Belongs To is present");
		logger.info("Checking Individual Receiver page info City is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfocity(), "City","Individual page Header City is Present");
		logger.info("Individual Receiver page info City is present");
		logger.info("Checking Individual Receiver page info Province is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoProvince(), "Province","Individual page Header Province is Present");
		logger.info("Individual Receiver page info Province is present");
		logger.info("Checking Individual Receiver page info status is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoStatus(), "Status","Individual page Header Status is Present");
		logger.info("Individual Receiver page info Status is present");
		logger.info("Checking Individual Receiver page info Phone number is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoPhoneNum(), "Phone Number","Individual page Header PhoneNum is Present");
		logger.info("Individual Receiver page info Phone number is present");
		logger.info("Checking Individual Receiver page info Actions is present");
		Assert.assertEquals(addNewIndividualReceiver.checkIndividualReceiverPageInfoAction(), "Actions","Individual page Header Actions is Present");
		logger.info("Individual Receiver page info Actions is present");
		
		// Validation of new sender page
		addNewIndividualReceiver.clickNewReceiverButton();
		logger.info("Checking New Receiver Firstname box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverFirstNameBox(),"Checking Create New Receiver FirstName is present or not");
		logger.info("New Receiver Firstname box is present");
		logger.info("Checking New Receiver Lastname box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverLastNameBox(),"Checking  Create New Receiver LastName is present or not");
		logger.info("New Receiver Lastname box is present");
		logger.info("Checking New Receiver Belongs to box is present");
		Assert.assertTrue(addNewIndividualReceiver.checkNewReceiverBelongsToBox(),"Checking  Create New Receiver Belongs to is present or not");
		logger.info("New Receiver Belongs to box is present");
		logger.info("Checking New Receiver Phone number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverPhoneNumBox(),"Checking Create New Receiver PhoneBox is present or not");
		logger.info("New Receiver Phone number box is present");
		logger.info("Checking New Receiver Country box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverCountryBox(),"Checking Create New Receiver CountryBox is present or not");
		logger.info("New Receiver Country box is present");
		logger.info("Checking New Receiver Province box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverProvinceBox(),"Checking Create New Receiver ProvinceBox  is present or not");
		logger.info("New Receiver Province box is present");
		logger.info("Checking New Receiver City box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverCityBox(),"Checking Create New Receiver CityBox is present or not");
		logger.info("New Receiver City box is present");
		logger.info("Checking New Receiver Address box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverAddressBox(),"Checking Create New Receiver AddressBox is present or not");
		logger.info("New Receiver Address box is present");
		logger.info("Checking New Receiver Next button is present");
		Assert.assertFalse(addNewIndividualReceiver.CheckNewReceiverNextButton(),"Checking Create New Receiver Next Button is present or not");
		logger.info("New Receiver Next button is present");
		logger.info("Checking New Receiver Cancel button is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckNewReceiverCancelButton(),"Checking Create New Receiver Cancel Button is present or not");
		logger.info("New Receiver Cancel button is present");
		// Validation after fill the new sender fields
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		addNewIndividualReceiver.enternewReceiverFirstName(firstname);
		addNewIndividualReceiver.enternewReceiverLastName(lastName);
		addNewIndividualReceiver.enternewReceiverBelongsTo();
		addNewIndividualReceiver.enternewReceiverPhoneNum(faker.number().digits(10));
		addNewIndividualReceiver.enternewReceiverCountry();
		addNewIndividualReceiver.enternewReceiverProvince();
		addNewIndividualReceiver.enternewReceiverCity();
		String address = faker.address().fullAddress();
		addNewIndividualReceiver.enternewReceiverAddress(address);
		addNewIndividualReceiver.clickNewReceiverNextButton();
		// Validation of all types of finance type
		addNewIndividualReceiver.enternewReceiverFinanceType1();
		logger.info("Checking New Receiver Paypal Mail box is present");
		Assert.assertTrue(addNewIndividualReceiver.checknewReceiverPaypalMailBoxIsEnabled(),"Checking Paypal mail textbox is present or not");
		logger.info("New Receiver Paypal Mail box is present");
		addNewIndividualReceiver.enternewReceiverFinanceType2();
		logger.info("Checking New Receiver Venmo id box is present");
		Assert.assertTrue(addNewIndividualReceiver.ChecknewReceiverVenmoIdBoxIsEnabled(),"Checking VenmoId textbox is present or not");
		logger.info("New Receiver Venmo id box is present");
		addNewIndividualReceiver.enternewReceiverFinanceType3();
		logger.info("Checking New Receiver Bank name box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankNameBoxIsEnabled(),"Checking BankName textbox is present or not");
		logger.info("New Receiver Bank name box is present");
		logger.info("Checking New Receiver Bank Account number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankAccountNumBoxIsEnabled(),"Checking BankAccountNumBox textbox is present or not");
		logger.info("New Receiver Bank Account number box is present");
		logger.info("Checking New Receiver Bank IBAN number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankIbanIsEnabled(),"Checking BankIban textbox is present or not");
		logger.info("New Receiver Bank IBAN number box is present");
		logger.info("Checking New Receiver Bank Swift BIC code box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankSwiftBICCodeBoxIsEnabled(),"Checking BankSwiftBICCode textbox is present or not");
		logger.info("New Receiver Bank Swift BIC code box is present");
		logger.info("Checking New Receiver Bank Branch number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankBranchNumBoxIsEnabled(),"Checking BankBranchNumBox textbox is present or not");
		logger.info("New Receiver Bank Branch number box is present");
		logger.info("Checking New Receiver Bank Transit number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankTransitNumBoxIsEnabled(),"Checking BankTransitNumBox textbox is present or not");
		logger.info("New Receiver Bank Transit number box is present");
		logger.info("Checking New Receiver Bank ABA Routing number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankABARoutingNumIsEnabled(),"Checking BankABARoutingNum textbox is present or not");
		logger.info("New Receiver Bank ABA Routing number box is present");
		logger.info("Checking New Receiver Bank IFSC number box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankIFSCIsEnabled(),"Checking BankIFSCIs textbox is present or not");
		logger.info("New Receiver Bank IFSC number box is present");
		logger.info("Checking New Receiver Bank LEI code box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckbankLEICodeIsEnabled(),"Checking BankLEICode textbox is present or not");
		logger.info("New Receiver Bank LEI code box is present");
		logger.info("Checking New Receiver Bank LEI code box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckBankAddressIsEnabled(),"Checking BankAddress textbox is present or not");
		logger.info("New Receiver Bank LEI code box is present");
		logger.info("Checking New Receiver Bank Cancel button box is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckCancelButtonIsEnabled(),"Checking Cancel button is present or not");
		logger.info("New Receiver Bank Cancel button box is present");
		logger.info("Checking New Receiver Bank Back button box is present");
		Assert.assertTrue(addNewIndividualReceiver.checkBackButtonIsEnabled(),"Checking Back button is present or not");
		logger.info("Checking New Receiver Bank Back button is present");
		logger.info("Checking New Receiver Bank SaveAsDraft button is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckSaveAsDraftButtonIsEnabled(),"Checking SaveAsDraft Button textbox is present or not");
		logger.info("New Receiver Bank SaveAsDraft is present");
		logger.info("Checking New Receiver Bank SaveAndActivate button is present");
		Assert.assertTrue(addNewIndividualReceiver.checkSaveAndActivateButtonIsEnabled(),"Checking SaveAndActivate is present or not");
		logger.info("New Receiver Bank SaveAndActivate button is present");
		// Validation of finance type bank with filled all details
		addNewIndividualReceiver.enternewBankName(Constants.bankname);
		addNewIndividualReceiver.enterBankaccountNum(faker.number().digits(10));
		addNewIndividualReceiver.enterBankIBan(faker.number().digits(6));
		addNewIndividualReceiver.enterBankSwiftBICCode(faker.number().digits(4));
		addNewIndividualReceiver.enternewBankBranchNum(faker.number().digits(5));
		addNewIndividualReceiver.enterBankTransitNum(faker.number().digits(3));
		addNewIndividualReceiver.enterBankABARoutingNum(faker.number().digits(5));
		addNewIndividualReceiver.enterBankIFSCInum(faker.number().digits(4));
		addNewIndividualReceiver.enterBankLEINUM(faker.number().digits(4));
		addNewIndividualReceiver.enterBankAddress(Constants.bankaddress);
		addNewIndividualReceiver.clickBackButton();
		// Validation of next ,previous,saveasdraft,edit,saveandactive buttons
		addNewIndividualReceiver.clickNextButton();
		addNewIndividualReceiver.clickSaveAsDraftButton();
		logger.info("Checking Individual Receiver page info Edit button is present");
		Assert.assertTrue(addNewIndividualReceiver.CheckIndividualReceiverPageEditButton(),"Checking Individual Sender CLientPage EditButton is present or not");
		logger.info("Individual Receiver page info Edit button is present");
		addNewIndividualReceiver.clickEditButton(firstname, lastName);
		addNewIndividualReceiver.clickNextButton();
		addNewIndividualReceiver.enterBankaccountNum(faker.number().digits(1));
		addNewIndividualReceiver.clickSaveAndActivateButton();
		// driver.navigate().refresh();
	}
	@Test(priority = 11,enabled=false)
	public void ValidateAddNewBusinessReceiver() throws AWTException, InterruptedException {
		logger.info("This is to validate the New Business Receivers");
		addNewBusinessReceiver=new AddNewBusinessReceiversPage(driver);
		addNewBusinessReceiver.enterUserEmailId(mail);
		addNewBusinessReceiver.enterPassword(Constants.commonPassword);
		addNewBusinessReceiver.clickSignupButton();
		addNewBusinessReceiver.clickClientDropdownButton();
		addNewBusinessReceiver.clickReceiverButton();
		addNewBusinessReceiver.clickReceiverBusinessButton();
		// Validation of Business senders page info
		logger.info("Checking Business Receiver Title is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverTitle(), "View your business receiver clients");
		logger.info("Business Receiver Title is present");
		logger.info("Checking Business Receiver Client page Searchbox  is present");
		Assert.assertTrue(addNewBusinessReceiver.checkBusinessReceiverSearchBoxIsPresent(),"Checking Business Receiver ClientPage SearchBox is present or not");
		logger.info("Business Receiver client page Searchbox is present");
		logger.info("Checking Business Receiver client page New Receiver button is present");
		Assert.assertTrue(addNewBusinessReceiver.checkBusinessReceiverPageNewReceiverButtonIsPresent(),"Checking Business Receiver ClientPage NewReceiver button is present or not");
		logger.info("Business Receiver client page New Receiver button is present");
		logger.info("Checking New Receiver page info ID is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoId(), "ID","Business page Header Id is Present");
		logger.info("New Receiver page info ID is present");
		logger.info("Checking New Receiver page info Name is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoName(), "Name","Business page Header Name is Present");
		logger.info("New Receiver page info Name is present");
		logger.info("Checking New Receiver page info Xrpl Tag is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoXrplTag(), "Xrpl Tag","Business page Header Xrpl Tag is Present");
		logger.info("New Receiver page info Xrpl Tag is present");
		logger.info("Checking New Receiver page info Belongs to is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoBelongsTo(), "Belongs To","Business page Header Belongs to is Present");
		logger.info("New Receiver page info Belongs to is present");
		logger.info("Checking New Receiver page info City is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoCity(), "City","Business page Header City is Present");
		logger.info("New Receiver page info City is present");
		logger.info("Checking New Receiver page info Province is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoProvince(), "Province","Business page Header Province is Present");
		logger.info("New Receiver page info Province is present");
		logger.info("Checking New Receiver page info Status is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoStatus(), "Status","Business page Header Status is Present");
		logger.info("New Receiver page info Status is present");
		logger.info("Checking New Receiver page info Phone number is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoPhoneNum(), "Phone Number","Business page Header PhoneNum is Present");
		logger.info("New Receiver page info Phone number is present");
		logger.info("Checking New Receiver page info Actions is present");
		Assert.assertEquals(addNewBusinessReceiver.checkBusinessReceiverPageInfoAction(), "Actions","Business page Header Actions is Present");
		logger.info("New Receiver page info Actions is present");
		
		// Validation of new sender page

		addNewBusinessReceiver.clickNewReceiverButton();
		logger.info("Checking New Receiver Business name box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverBusinessNameBox(),"Checking Create New Receiver BusinessNameBox is present or not");
		logger.info("New Receiver Business name box is present");
		logger.info("Checking New Receiver First name box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverFirstNameBox(),"Checking Create New Receiver FirstNameBox is present or not");
		logger.info("New Receiver First name box is present");
		logger.info("Checking New Receiver Last name box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverLastNameBox(),"Checking  Create New Receiver LastNameBox is present or not");
		logger.info("New Receiver Last name box is present");
		logger.info("Checking New Receiver Belongs to box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverBelongsToBox(),"Checking  Create New Receiver Belongs to is present or not");
		logger.info("New Receiver Belongs to box is present");
		logger.info("Checking New Receiver Contact Designation name box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkPrimaryContactDesignationBox(),"Checking Create New Receiver Contact Disignation box is present or not");
		logger.info("New Receiver Contact Designation box name box is present");
		logger.info("Checking New Receiver Primary contact1  box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkPrimaryContact1Box(),"Checking Create New Receiver PhoneBox1 is present or not");
		logger.info("New Receiver  Primary contact1 box is present");
		logger.info("Checking New Receiver Primary contact2 box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkPrimaryContact2Box(),"Checking Create New Receiver PhoneBox2 is present or not");
		logger.info("New Receiver Primary contact2 box is present");
		logger.info("Checking New Receiver Country box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverCountryBox(),"Checking Create New Receiver Country box  is present or not");
		logger.info("New Receiver Country box is present");
		logger.info("Checking New Receiver Province box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverProvinceBox(),"Checking Create New Receiver ProvinceBox  is present or not");
		logger.info("New Receiver Province box is present");
		logger.info("Checking New Receiver City box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverCityBox(),"Checking Create New Receiver CityBox is present or not");
		logger.info("New Receiver City box is present");
		logger.info("Checking New Receiver Address box is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverAddressBox(),"Checking Create New Receiver AddressBox is present or not");
		logger.info("New Receiver address box is present");
		logger.info("Checking New Receiver Next button box is present");
		Assert.assertFalse(addNewBusinessReceiver.checkNewReceiverNextButton(),"Checking Create New Receiver Next Button is present or not");
		logger.info("New Receiver Next button is present");
		logger.info("Checking New Receiver Cancel button is present");
		Assert.assertTrue(addNewBusinessReceiver.checkNewReceiverCancelButton(),"Checking Create New Receiver Cancel Button is present or not");
		logger.info("New Receiver Cancel button is present");
		// Validation after fill the new sender fields
		String firstname = faker.name().firstName();
		String lastName = faker.name().lastName();
		String businessName = faker.name().firstName();
		addNewBusinessReceiver.enternewReceiverBusinessName(businessName);
		addNewBusinessReceiver.enternewReceiverFirstName(firstname);
		addNewBusinessReceiver.enternewReceiverLastName(lastName);
		addNewBusinessReceiver.enternewReceiverBelongsTo();
		addNewBusinessReceiver.enternewReceiverContactDesignation(Constants.designationcontact);
		addNewBusinessReceiver.enternewReceiverPrimaryContact1(faker.number().digits(10));
		addNewBusinessReceiver.enternewReceiverPrimaryContact2(faker.number().digits(10));
		addNewBusinessReceiver.enternewReceiverCountry();
		addNewBusinessReceiver.enternewReceiverProvince();
		addNewBusinessReceiver.enternewReceiverCity();
		String address = faker.address().fullAddress();
		addNewBusinessReceiver.enternewReceiverAddress(address);
		addNewBusinessReceiver.clickNewReceiverNextButton();
		addNewBusinessReceiver.enternewReceiverBusinessFinanceType1();
		logger.info("Checking New Receiver Paypal mail box is present");
		Assert.assertTrue(addNewBusinessReceiver.checknewReceiverPaypalMailBoxIsEnabled(),"Checking Paypal mail textbox is present or not");
		logger.info("New Receiver Paypal mail box is present");
		addNewBusinessReceiver.enternewReceiverFinanceType2();
		logger.info("Checking New Receiver Venmo id box is present");
		Assert.assertTrue(addNewBusinessReceiver.ChecknewReceiverVenmoIdBoxIsEnabled(),"Checking VenmoId textbox is present or not");
		logger.info("New Receiver Venmo id box is present");
		addNewBusinessReceiver.enternewReceiverFinanceType3();
		logger.info("Checking New Receiver Bank name box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankNameBoxIsEnabled(),"Checking BankName textbox is present or not");
		logger.info("New Receiver Bank name box is present");
		logger.info("Checking New Receiver Bank Account number box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankAccountNumBoxIsEnabled(),"Checking BankAccountNumBox textbox is present or not");
		logger.info("New Receiver Bank Account number box is present");
		logger.info("Checking New Receiver Bank IBAN box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankIbanIsEnabled(),"Checking BankIban textbox is present or not");
		logger.info("New Receiver Bank IBAN box is present");
		logger.info("Checking New Receiver Bank Swift BIC code box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankSwiftBICCodeBoxIsEnabled(),"Checking BankSwiftBICCode textbox is present or not");
		logger.info("New Receiver Bank Swift BIC code box is present");
		logger.info("Checking New Receiver Bank Branch number box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankBranchNumBoxIsEnabled(),"Checking BankBranchNumBox textbox is present or not");
		logger.info("New Receiver Bank Branch number box is present");
		logger.info("Checking New Receiver Bank Transit number box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankTransitNumBoxIsEnabled(),"Checking BankTransitNumBox textbox is present or not");
		logger.info("New Receiver Bank Transit number box is present");
		logger.info("Checking New Receiver Bank ABA Routing number box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankABARoutingNumIsEnabled(),"Checking BankABARoutingNum textbox is present or not");
		logger.info("New Receiver Bank ABA Routing number box is present");
		logger.info("Checking New Receiver Bank IFSC code box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankIFSCIsEnabled(),"Checking BankIFSCIs textbox is present or not");
		logger.info("New Receiver Bank IFSC code box is present");
		logger.info("Checking New Receiver Bank LEI code box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckbankLEICodeIsEnabled(),"Checking BankLEICode textbox is present or not");
		logger.info("New Receiver Bank LEI code box is present");
		logger.info("Checking New Receiver Bank Address box is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBankAddressIsEnabled(),"Checking BankAddress textbox is present or not");
		logger.info("New Receiver Bank Address box is present");
		logger.info("Checking New Receiver Bank Cancel button is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckCancelButtonIsEnabled(),"Checking Cancel button is present or not");
		logger.info("New Receiver Bank Cancel button is present");
		logger.info("Checking New Receiver Bank Back button is present");
		Assert.assertTrue(addNewBusinessReceiver.checkBackButtonIsEnabled(), "Checking Back button is present or not");
		logger.info("New Receiver Bank Back button is present");
		logger.info("Checking New Receiver Bank SaveAsDraft button is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckSaveAsDraftButtonIsEnabled(),"Checking SaveAsDraft Button textbox is present or not");
		logger.info("New Receiver Bank SaveAsDraft button is present");
		logger.info("Checking New Receiver Bank SaveAndActive button is present");
		Assert.assertTrue(addNewBusinessReceiver.checkSaveAndActivateButtonIsEnabled(),"Checking SaveAndActivate is present or not");
		logger.info("New Receiver Bank SaveAndActive button is present");
		// Validation of finance type bank with filled all details
		addNewBusinessReceiver.enternewBankName(Constants.bankname);
		addNewBusinessReceiver.enterBankaccountNum(faker.number().digits(10));
		addNewBusinessReceiver.enterBankIBan(faker.number().digits(6));
		addNewBusinessReceiver.enterBankSwiftBICCode(faker.number().digits(4));
		addNewBusinessReceiver.enternewBankBranchNum(faker.number().digits(5));
		addNewBusinessReceiver.enterBankTransitNum(faker.number().digits(3));
		addNewBusinessReceiver.enterBankABARoutingNum(faker.number().digits(5));
		addNewBusinessReceiver.enterBankIFSCInum(faker.number().digits(4));
		addNewBusinessReceiver.enterBankLEINUM(faker.number().digits(4));
		addNewBusinessReceiver.enterBankAddress(faker.address().fullAddress());
		addNewBusinessReceiver.clickBackButton();
		// Validation of next ,previous,saveasdraft,edit,saveandactive buttons
		addNewBusinessReceiver.clickNextButton();
		addNewBusinessReceiver.clickSaveAsDraftButton();
		logger.info("Checking New Receiver page info Edit button is present");
		Assert.assertTrue(addNewBusinessReceiver.CheckBusinessReceiverPageEditButton(),"Checking Business Sender CLientPage EditButton is present or not");
		logger.info("New Receiver page info Edit button is present");
		addNewBusinessReceiver.clickEditButton(businessName);
		addNewBusinessReceiver.enternewReceiverPrimaryContact2(faker.number().digits(10));
		addNewBusinessReceiver.clickNextButton();
		addNewBusinessReceiver.enterBankaccountNum(faker.number().digits(1));
		addNewBusinessReceiver.clickSaveAndActivateButton();
		
	}
	@Test(priority = 12,enabled=false)
	public void ValidateRemittanceDropdown() throws AWTException, InterruptedException {
		logger.info("This is to validate the Remittance Dropdown");
		 remittanceDropdownValidation=new RemittanceDropdownValidationPage(driver);
		 remittanceDropdownValidation.enterUserEmailId(mail);
		 remittanceDropdownValidation.enterPassword(Constants.commonPassword);
		 remittanceDropdownValidation.clickSignupButton();
		 remittanceDropdownValidation.clickRemittanceDropdownButton();
		 logger.info("Checking Remittance Outward button is present");
		 Assert.assertTrue(remittanceDropdownValidation.checkOutwardButtonIsDisplayed(),"Checking Outward button is present or not");
		 logger.info("Remittance Outward button is present");
		 logger.info("Checking Remittance Inward button is present");
		 Assert.assertTrue(remittanceDropdownValidation.checkInwardButtonIsDisplayed(),"Checking Inward button is present or not");
		 logger.info("Remittance Inward button is present");
		 remittanceDropdownValidation.clickOutwardButton();
		 logger.info("Checking Outward AllRemittance button is present");
		 Assert.assertTrue(remittanceDropdownValidation.checkAllRemittanceButtonIsDisplayed(),"Checking AllRemittance button is present or not");
		 logger.info("Outward AllRemittance button is present");
		 logger.info("Checking Outward Pending CustomerRemittance button is present");
		 Assert.assertTrue(remittanceDropdownValidation.checkPendingCustomerRemittanceButtonIsDisplayed(),"Checking Pending customer Remittance button is present or not");
		 logger.info("Outward Pending Customer Remittance button is present");
		 remittanceDropdownValidation.clickallRemittanceButton();
		 logger.info("Checking Outward Remittance page Title is present");
		 Assert.assertEquals(remittanceDropdownValidation.CheckOutwardRemittanceTitlePage(), "Outward Remittance","Outward Remittance page Title is Present");
		 logger.info("Outward Remittance page Title is present");
		 logger.info("Checking Outward Remittance page Title sub message is present");
		 Assert.assertEquals(remittanceDropdownValidation.CheckOutwardRemittanceTitleSubMessage(), "View your remittance requests","Outward Remittance page sub message is Present");
		 logger.info("Outward Remittance Title sub message is present");
		 logger.info("Checking New Remittance Button is present");
		 Assert.assertTrue(remittanceDropdownValidation.checkNewRemittanceButtonIsDisplayed(),"Checking New Remittance button is present or not");
		 logger.info("New Remittance Button is present");
		 logger.info("Checking Outward Remittance page Month box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceMonthBox(), "This Month","Outward Remittance month box is Present or not");
		 logger.info("Outward Remittance page Month box is present");
		 logger.info("Checking Outward Remittance page TimePeriod box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceTimePeriodBox1(), "","Checking Outward Remittance TimePeriod box1 is Present or not");
		 logger.info("Outward Remittance page TimePeriod box is present");
		 remittanceDropdownValidation.clickTimePeriodCalenderBox1();
		 logger.info("Checking Outward Remittance page TimePeriod Filter box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceTimePeriodBox2(), "","Checking Outward Remittance TimePeriod box2 is Present or not");
		 logger.info("Outward Remittance page TimePeriod Filter box is present");
		 remittanceDropdownValidation.clickTimePeriodCalenderBox2();
		 logger.info("Checking Outward Remittance page SelectCurrency box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceSelectCurrencyBox(), "","Checking Outward Remittance Select currency box is Present or not");
		 logger.info("Outward Remittance page SelectCurrency box is present");
		 logger.info("Checking Outward Remittance page Search box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceSearchBox(), "","Checking Outward Remittance Searrch box is Present or not");
		 logger.info("Outward Remittance page Search box is present");
		 logger.info("Checking Outward Remittance page SelectStatus box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceSelectStatusBox(), "","Checking Outward Remittance Search box is Present or not");
		 logger.info("Outward Remittance page SelectStatus box is present");
		 logger.info("Checking Outward Remittance page ResetFilter button box is present");
		 Assert.assertTrue(remittanceDropdownValidation.checkOutwardRemittanceResetFilterButton(),"Checking Remittance ResetFilter button is present or not");
		 logger.info("Outward Remittance page ResetFilter button is present");
		 logger.info("Checking Outward Remittance page ID box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceIDBox(), "ID","Outward Remittance ID box is Present or not");
		 logger.info("Outward Remittance page Id box is present");
		 logger.info("Checking Outward Remittance page Type box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceTypeBox(), "Type","Outward Remittance Type box is Present or not");
		 logger.info("Outward Remittance page Type box is present");
		 logger.info("Checking Outward Remittance page Date box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceDateBox(), "Date","Outward Remittance Date box is Present or not");
		 logger.info("Outward Remittance page Date box is present");
		 logger.info("Checking Outward Remittance page Sender MTO box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceSenderMTOBox(), "Sender MTO","Outward Remittance SenderMTO box is Present or not");
		 logger.info("Outward Remittance page Sender MTO box is present");
		 logger.info("Checking Outward Remittance page Sender box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceSenderBox(), "Sender","Outward Remittance Sender box is Present or not");
		 logger.info("Outward Remittance page Sender box is present");
		 logger.info("Checking Outward Remittance page Recipient box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceRecipientBox(), "Recipient MTO","Outward Remittance Recipient box is Present or not");
		 logger.info("Outward Remittance page Recipient box is present");
		 logger.info("Checking Outward Remittance page End Benificiary box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceEndBenificiaryBox(), "End Beneficiary","Outward Remittance EndBenificiary box is Present or not");
		 logger.info("Outward Remittance page End Benificiary box is present");
		 logger.info("Checking Outward Remittance page Sent Value box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceSendValueBoxBox(), "Sent Value","Outward Remittance sendValue box is Present or not");
		 logger.info("Outward Remittance page Sent Value box is present");
		 logger.info("Checking Outward Remittance page Recv Value box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceRecValuBoxeBox(), "Recv Value","Outward Remittance RecValue box is Present or not");
		 logger.info("Outward Remittance page Recv Value box is present");
		 logger.info("Checking Outward Remittance page Status box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceStatusBox(), "Status","Outward Remittance Status box is Present or not");
		 logger.info("Outward Remittance page Status box is present");
		 logger.info("Checking Outward Remittance page Update Status box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkOutwardRemittanceUpdateStatusBox(), "Update Status","Outward Remittance UpdateStatus box is Present or not");
		 logger.info("Outward Remittance page Update Status box is present");
		 logger.info("Checking Outward Remittance page Actions box is present");
		 Assert.assertEquals(remittanceDropdownValidation.checkIndividualSenderPageInfoAction(), "Actions","Outward Remittance Actions box is Present or not");
		 logger.info("Outward Remittance page Actions box is present");
	}
		 @Test(priority = 13,enabled=true)
			public void ValidateNewRemittanceButtonTypeP2P() throws AWTException, InterruptedException {
				logger.info("This is to validate the New Remittance button functional flow");
				validateNewRemittanceButton=new ValidateNewRemittanceButtonFunctionPage(driver);
				validateNewRemittanceButton.enterUserEmailId(Constants.username);
				validateNewRemittanceButton.enterPassword(Constants.commonPassword);
				validateNewRemittanceButton.clickSignupButton();
				validateNewRemittanceButton.clickRemittanceDropdownButton();
				logger.info("Checking Outward buttons is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkOutwardButtonIsDisplayed(),"Checking Outward button is present or not");
			    logger.info("Outward button is present");
			    logger.info("Checking Inward button is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkInwardButtonIsDisplayed(),"Checking Inward button is present or not");
			    logger.info("Inward button is present");
				 validateNewRemittanceButton.clickOutwardButton();
				 logger.info("Checking AllRemittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkAllRemittanceButtonIsDisplayed(),"Checking AllRemittance button is present or not");
				 logger.info("AllRemittance button is present");
				 logger.info("Checking Pending Customer Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPendingCustomerRemittanceButtonIsDisplayed(),"Checking Pending customer Remittance button is present or not");
				 logger.info("Pending Customer Remittance button is present");
				 validateNewRemittanceButton.clickallRemittanceButton();
				 logger.info("Checking Outward Remittance page Title is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitlePage(), "Outward Remittance","Checking outward Remittance title is Present or not");
				 logger.info("Outward Remittance page Title is present");
				 logger.info("Checking Outward Remittance page Title sub message is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitleSubMessage(), "View your remittance requests","Checking outward Remittance title submessage is Present or not");
				 logger.info("Outward Remittance page Title sub message is present");
				 logger.info("Checking New Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkNewRemittanceButtonIsDisplayed(),"Checking New Remittance button is present or not");
				 logger.info("New Remittance button is present");
				 validateNewRemittanceButton.clickNewRemittanceButton();
				 logger.info("Checking New Remittance Client info page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckClientInfoPage(), "Client Info","Checking client Info page is present or not");
				 logger.info("New Remittance Client info is present");
				 logger.info("Checking New Remittance Radio button P2P is selected");
				Assert.assertTrue(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2P(),"Checking RadioButton P2P is selected or not");
				 logger.info("New Remittance Radio button P2P is selected");
				 logger.info("Checking New Remittance Radio button P2B is not selected");
				Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2B(),"Checking RadioButton P2B is selected or not");
				 logger.info("New Remittance Radio button P2B is not selected");
				 logger.info("Checking New Remittance Radio button B2B is not selected");
				 Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2B(),"Checking RadioButton B2B is selected or not");
				 logger.info("New Remittance Radio button B2B is not selected");
				 logger.info("Checking New Remittance Radio button B2P is not selected");
				 Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2P(),"Checking RadioButton B2P is selected or not");
				 logger.info("New Remittance Radio button B2P is not selected");
				 logger.info("Checking Purpose of Remittance inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPurposeOfRemittanceInputBox(),"Checking purpose of Remittance inputbox is present or not");
				 logger.info("Purpose of Remittance inputbox is present");
				 
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithSalary();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithBusinessFund();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithOther();
				 logger.info("Checking Other Purpose inputbox is present");
				// Assert.assertTrue(validateNewRemittanceButton.checkPurposeOtherInputbox(),"Checking other purpose inputbox is present or not");
				 logger.info("Other Purpose inputbox is present");
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithPesonel();
				 logger.info("Checking Sender dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDropdownIsPresent(),"Checking Sender dropdown is present or not");
				 logger.info("Sender dropdown is present");
				 logger.info("Checking Target Country dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkTargetCountryDropdownIsPresent(),"Checking Target country dropdown is present or not");
				 logger.info("Target Country dropdown is present");
				 validateNewRemittanceButton.enterSenderName();
				 validateNewRemittanceButton.enterTargetCountryName();
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetails(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailFirstName(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailLastName(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhone(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCity(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvince(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountry(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddress(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 validateNewRemittanceButton.clickAddNewDocument();
				 logger.info("Checking Document Type inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentTypeInputbox(),"Checking document type inputbox is present or not");
				 logger.info("Document Type inputbox is present");
				 validateNewRemittanceButton.checkAddDocumentAdhaar();
				 validateNewRemittanceButton.checkAddDocumentPassport();
				 validateNewRemittanceButton.checkAddDocumentDrivingLicence();
				 validateNewRemittanceButton.checkAddDocumentPanCard();
				 logger.info("Checking Document Name inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentNameInputbox(),"Checking document name inputbox is present or not");
				 logger.info("Document Name inputbox is present");
				 validateNewRemittanceButton.enterDocumentName(faker.name().firstName());
				 logger.info("Checking Document upload Inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentUploadBox(),"Checking document upload inputbox is present or not");
				 logger.info("Document upload Inputbox is present");
				 validateNewRemittanceButton.uploadDocumentFromLocal();
				 logger.info("Checking Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkCancelButton(),"Checking document upload page cancel button is present or not");
				 logger.info("Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkUploadButton(),"Checking document upload page upload button is present or not");
				 logger.info("Document upload page Upload button is present");
				 validateNewRemittanceButton.clickUploadButton();
				 
				 logger.info("Checking File Preview button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFilePreviewButton(),"Checking file preview button is present or not");
				 logger.info("File Preview button is present");
				 logger.info("Checking File Delete button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFileDeleteButton(),"Checking file delete button is present or not");
				 logger.info("File Delete button is present");
				 logger.info("Checking Sender Declarataion  check box is present");
				 Assert.assertFalse(validateNewRemittanceButton.checkSenderDeclarationCheckbox(),"Checking sender declaration checkbox is present or not");
				 logger.info("Sender Declaration  checkbox is present");
				
				validateNewRemittanceButton.clickSenderDeclarationCheckbox();
				 validateNewRemittanceButton.clickUploadedFileImage();
				 validateNewRemittanceButton.clickClientInfoPageNextButton();
				 logger.info("Checking Recipient info page is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientInfoPage(),"Checking Recipient info page is present or not");
				 logger.info("Recipient info page is present");
				 logger.info("Checking EndBenificiary name box is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryNameBox(),"Checking End benifiaciary name box is present or not");
				 logger.info("End benificiary name box is present");
				 logger.info("Checking End Beneficiary Account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryAccountNumBox(),"Checking End benifiaciary account number box is present or not");
				 logger.info("End Beneficiary Account number is present");
				 validateNewRemittanceButton.enterEndBenificiaryName();
				 validateNewRemittanceButton.enterEndBenificiaryAccountNum();
				 logger.info("Checking Recipient Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientDetails(), "Recipient Details","Checking Recipient details header is Present or not");
				 logger.info("Recipient Details  is present");
				 logger.info("Checking Recipient Firstname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientFirstname(), "First Name","Checking Recipient firstname is Present or not");
				 logger.info("Recipient Firstname  is present");
				 logger.info("Checking Recipient Lastname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientLastname(), "Last Name","Checking Recipient lastname Actions is Present or not");
				 logger.info("Recipient Lastname  is present");
				 logger.info("Checking Recipient Phone number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientPhone(), "Phone","Checking Recipient phone number is Present or not");
				 logger.info("Recipient Phone number  is present");
				 logger.info("Checking Recipient City  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCity(), "City","Checking Recipient city is Present or not");
				 logger.info("Recipient City  is present");
				 logger.info("Checking Recipient Province  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientProvince(), "Province","Checking Recipient province is Present or not");
				 logger.info("Recipient Province  is present");
				 logger.info("Checking Recipient Country  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCountry(), "Country","Checking Recipient country is Present or not");
				 logger.info("Recipient Country  is present");
				 logger.info("Checking Recipient Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientAddress(), "Address","Checking Recipient address is Present or not");
				 logger.info("Recipient Address  is present");
				 logger.info("Checking Recipient Financial Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientFinancialDetails(), "Financial Details","Checking Recipient financial details header is Present or not");
				 logger.info("Recipient Financial Details  is present");
				 logger.info("Checking Recipient Bank name  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankNames(), "Bank Name","Checking Recipient bank name is Present or not");
				 logger.info("Recipient Bank name  is present");
				 logger.info("Checking Recipient Bank Branch  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankBranch(), "Branch","Checking Recipient bank branch is Present or not");
				 logger.info("Recipient Bank Branch  is present");
				 logger.info("Checking Recipient Bank Account number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAcNum(), "Account Number","Checking Recipient bank account number is Present or not");
				 logger.info("Recipient Bank Account number  is present");
				 logger.info("Checking Recipient Bank LEI code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankLEICode(), "LEI Code","Checking Recipient bank LEI code is Present or not");
				 logger.info("Recipient Bank LEI code  is present");
				 logger.info("Checking Recipient Bank IBAN  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIBAN(), "IBAN","Checking Recipient bank IBAN is Present or not");
				 logger.info("Recipient Bank IBAN  is present");
				 logger.info("Checking Recipient Bank Swift BIC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankSwiftBICcode(), "SWIFT BIC Code","Checking Recipient bank swift BIC code is Present or not");
				 logger.info("Recipient Bank Swift BIC code  is present");
				 logger.info("Checking Recipient Bank Transit number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankTransitNum(), "Transit Number","Checking Recipient Transit number is Present or not");
				 logger.info("Recipient Bank Transit number  is present");
				 logger.info("Checking Recipient Bank ABA Routing number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankABARoutingNum(), "ABA Routing Number","Checking Recipient bank ABA Routing code is Present or not");
				 logger.info("Recipient Bank ABA Routing number  is present");
				 logger.info("Checking Recipient Bank IFSC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIFSCcode(), "IFSC Code","Checking Recipient bank IFSC code is Present or not");
				 logger.info("Recipient Bank IFSC code  is present");
				 logger.info("Checking Recipient Bank Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAddress(), "Address","Checking Recipient bank address is Present or not");
				 logger.info("Recipient Bank Address  is present");
				 logger.info("Checking Recipient page Back button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoBackButton(),"Checking Recipient info page Back button is Present or not");
				 logger.info("Recipient page Back button  is present");
				 logger.info("Checking Recipient page next button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoNextButton(),"Checking Recipient info page Next button is Present or not");
				 logger.info("Recipient page Next button is present");
				 validateNewRemittanceButton.clickRecipientInfoPageNextButton();
				 logger.info("Checking Transfer Details page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckTransferDetailPage(), "Transfer Details","Checking Transfer Detail page is Present or not");
				 logger.info("Transfer Details page  is present");
				 logger.info("Checking Amount Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAmountToRemitbox(),"Checking amount Remit Box is present or not");
				 logger.info("Amount Remit box is present");
				 logger.info("Checking Currency Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyRemitbox(),"Checking currency Remit Box is present or not");
				 logger.info("Currency Remit box  is present");
				 logger.info("Checking Amount Receive MTO box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckamountToReceivebox(),"Checking amount Receive MTO Box is present or not");
				 logger.info("Amount Receive MTO box  is present");
				 logger.info("Checking Currency Receive box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyReceivebox(),"Checking currency Receive Box is present or not"); 
				 logger.info("Currency Receive box  is present");
				 logger.info("Checking Operating wallet box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckOperatingWalletbox(),"Checking operating wallet Box is present or not");
				 logger.info("Operating wallet box  is present");
				 validateNewRemittanceButton.enterRecipientMTOBox();
				 validateNewRemittanceButton.enterAmountToRemit();
				 validateNewRemittanceButton.enterOperatingWallet();
				 validateNewRemittanceButton.enterCustomerPaidTypeCash();
				 validateNewRemittanceButton.enterCustomerPaidTypePaypal();
				 validateNewRemittanceButton.enterCustomerPaidTypeOthers();
				 logger.info("Checking Customer Paid Type Other specification box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCustomerPaidTypeOtherSpecBox(),"Checking Recipient Customer paid type other specification box is present or not");
				 logger.info("Customer Paid Type Other specification box is present");
				 validateNewRemittanceButton.enterCustomerPaidTypeBank();
				 logger.info("Checking Balance is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalance(),"Checking Balance is present or not");
				 logger.info("Balance is present");
				 logger.info("Checking Balance Amount is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalanceAmount(),"Checking Balance Amount is present or not");
				 logger.info("Balance Amount is present");
				 logger.info("Checking Add money button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAddMoneyButton(),"Checking Add money button is present or not");
				 logger.info("Add money button is present");
				 logger.info("Checking Refresh button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRefreshButton(),"Checking Refresh buttonis present or not");
				 logger.info("Refresh button is present");
				
				 logger.info("Checking Wallet Balance is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckWalletBalanceIsDisplayed(), "MTO Balance","Checking wallet balance is present or not");
				 logger.info("Wallet Balance is present");
				/* validateNewRemittanceButton.clickAddMoneyButton();
				 validateNewRemittanceButton.enterAddMoneyFromAmount();
				 validateNewRemittanceButton.enterAddMoneyRemark();
				 validateNewRemittanceButton.clickAddMoneyNextButton();
				 validateNewRemittanceButton.enterUserPassword();
				 validateNewRemittanceButton.clickTransferButton();*/
				 validateNewRemittanceButton.enterSenderMTOFeeAmount();
				 logger.info("Checking Transfer page Cancel  button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageCancelButton(),"Checking Transfer page Cancel Button is present or not");
				 logger.info("Transfer page cancel button is present");
				 logger.info("Checking Transfer page Next button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageNextButton(),"Checking Transfer page Next Button is present or not");
				 logger.info("Transfer page Next  button is present"); 
				 validateNewRemittanceButton.clickTransferPageNextButton();
				 logger.info("Checking Preview and Submit page is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkPreviewAndSubmitPage(),"Checking Preview and Submit page is present or not");
				 logger.info("Preview and Submit page is present");
				 logger.info("Checking Remittance Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceDetails(),"Checking Remittance details header is present or not");
				 logger.info("Remittance Details is present");
				 logger.info("Checking Remittance Amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceAmount(),"Checking Remittance Amount is present or not");
				 logger.info("Remittance Amount is present");
				 logger.info("Checking Sender MTO fee is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderMTOfee(),"Checking Sender MTO fee is present or not");
				 logger.info("Sender MTO fee is present");
				 logger.info("Checking Remittance total deposit amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkTotalDepositAmount(),"Checking Remittance total deposit amount is present or not");
				 logger.info("Remittance total deposit amount  is present");
				 logger.info("Checking Remittance payout is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkAmountPayout(),"Checking Remittance payout is present or not");
				 logger.info("Remittance payout is present");
				 logger.info("Checking Remittance deposit type is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkDepositType(),"Checking Remittance deposit type is present or not");
				 logger.info("Remittance deposit type is present");
				 logger.info("Checking Remittance purpose is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittancePurpose(),"Checking Remittance purpose is present or not");
				 logger.info("Remittance purpose is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkConversionRate(),"Checking Remittance conversion rate is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceType(),"Checking Remittance type is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance date is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittaneDate(),"Checking Remittance date is present or not");
				 logger.info("Remittance date is present");
				 logger.info("Checking Remittance created by  is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceCreatedby(),"Checking Remittance created by is present or not");
				 logger.info("Remittance created by is present");
				 
				
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailsFinalPreview(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailFirstNameFinalPreview(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailLastNameFinalPreview(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhoneFinalPreview(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCityFinalPreview(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvinceFinalPreview(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountryFinalPreview(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddressFinalPreview(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 logger.info("Checking Sender Document is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailDocumentsFinalPreview(),"Checking Document of the sender is present or not");
				 logger.info("Sender Document is present");
				 
				 
				 logger.info("Checking Recipient Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientDetailsFinalPreview(),"Checking Recipient details header is present or not");
				 logger.info("Recipient Details is present");
				 logger.info("Checking Recipient Firstname is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientFirstnameFinalPreview(),"Checking firstname of the Recipient is present or not");
				 logger.info("Recipient Firstname is present");
				 logger.info("Checking Recipient Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientLastnameFinalPreview(),"Checking lastname of the Recipient is present or not");
				 logger.info("Recipient Lastname is present");
				 logger.info("Checking Recipient Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientPhoneFinalPreview(),"Checking phone number of the Recipient  is present or not");
				 logger.info("Recipient Phonenumber is present");
				 logger.info("Checking Recipient City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCityFinalPreview(),"Checking city of the Recipient is present or not");
				 logger.info("Recipient City is present");
				 logger.info("Checking Recipient Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientProvinceFinalPreview(),"Checking province of the Recipient  is present or not");
				 logger.info("Recipient Province is present");
				 logger.info("Checking Recipient Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCountryFinalPreview(),"Checking country of the Recipient is present or not");
				 logger.info("Recipient Country is present");
				 logger.info("Checking Recipient Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientAddressFinalPreview(),"Checking address of the Recipient is present or not");
				 logger.info("Recipient Address is present");
				 
				 logger.info("Checking Financial Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkFinancialDetailsFinalPreview(),"Checking Financial details header is present or not");
				 logger.info("Financial Details is present");
				 logger.info("Checking Bank name is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankNameFinalPreview(),"Checking Bank name of the Recipient is present or not");
				 logger.info("Bank name is present");
				 logger.info("Checking Recipient Bank branch is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientBankBranchFinalPreview(),"Checking Bank branch of the Recipient is present or not");
				 logger.info("Bank branch is present");
				 logger.info("Checking Bank account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAcNumFinalPreview(),"Checking Bank account number of the Recipient  is present or not");
				 logger.info("Bank account number is present");
				 logger.info("Checking Bank LEI code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankLEICodeFinalPreview(),"Checking Bank LEI code of the Recipient is present or not");
				 logger.info("Bank LEI code is present");
				 logger.info("Checking Bank IBAN is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIBANFinalPreview(),"Checking Bank IBAN of the Recipient  is present or not");
				 logger.info("Bank IBAN is present");
				 logger.info("Checking Bank swift BIC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankSwiftBICcodeFinalPreview(),"Checking Bank swift BIC code of the Recipient is present or not");
				 logger.info("Bank swift BIC code is present");
				 logger.info("Checking Bank transit number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankTransitNumFinalPreview(),"Checking Bank transit number of the Recipient is present or not");
				 logger.info("Bank transit number is present");	 
				 logger.info("Checking Bank ABA Routing number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankABARoutingNumFinalPreview(),"Checking Bank ABA Routing number of the Recipient  is present or not");
				 logger.info("Bank ABA Routing number is present");
				 logger.info("Checking Bank IFSC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIFSCcodeFinalPreview(),"Checking Bank IFSC code of the Recipient is present or not");
				 logger.info("Bank IFSC code is present");
				 logger.info("Checking Bank address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAddressFinalPreview(),"Checking Bank address is present or not");
				 logger.info("Bank address number is present");
				validateNewRemittanceButton.clickConfirmAndSubmitButton();		 

		 }
		 @Test(priority = 14,enabled=true)
			public void ValidateNewRemittanceButtonTypeP2B() throws AWTException, InterruptedException {
				logger.info("This is to validate the New Remittance button functional flow");
				validateNewRemittanceButton=new ValidateNewRemittanceButtonFunctionPage(driver);
				validateNewRemittanceButton.enterUserEmailId(Constants.username);
				validateNewRemittanceButton.enterPassword(Constants.commonPassword);
				validateNewRemittanceButton.clickSignupButton();
				validateNewRemittanceButton.clickRemittanceDropdownButton();
				logger.info("Checking Outward buttons is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkOutwardButtonIsDisplayed(),"Checking Outward button is present or not");
			    logger.info("Outward button is present");
			    logger.info("Checking Inward button is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkInwardButtonIsDisplayed(),"Checking Inward button is present or not");
			    logger.info("Inward button is present");
				 validateNewRemittanceButton.clickOutwardButton();
				 logger.info("Checking AllRemittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkAllRemittanceButtonIsDisplayed(),"Checking AllRemittance button is present or not");
				 logger.info("AllRemittance button is present");
				 logger.info("Checking Pending Customer Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPendingCustomerRemittanceButtonIsDisplayed(),"Checking Pending customer Remittance button is present or not");
				 logger.info("Pending Customer Remittance button is present");
				 validateNewRemittanceButton.clickallRemittanceButton();
				 logger.info("Checking Outward Remittance page Title is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitlePage(), "Outward Remittance","Checking outward Remittance title is Present or not");
				 logger.info("Outward Remittance page Title is present");
				 logger.info("Checking Outward Remittance page Title sub message is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitleSubMessage(), "View your remittance requests","Checking outward Remittance title submessage is Present or not");
				 logger.info("Outward Remittance page Title sub message is present");
				 logger.info("Checking New Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkNewRemittanceButtonIsDisplayed(),"Checking New Remittance button is present or not");
				 logger.info("New Remittance button is present");
				 validateNewRemittanceButton.clickNewRemittanceButton();
				 logger.info("Checking New Remittance Client info page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckClientInfoPage(), "Client Info","Checking client Info page is present or not");
				 logger.info("New Remittance Client info is present");
				 validateNewRemittanceButton.clickRemittanceTypeRadioButtonP2B();
				 logger.info("Checking New Remittance Radio button P2P is selected");
				Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2P(),"Checking RadioButton P2P is selected or not");
				 logger.info("New Remittance Radio button P2P is selected");
				 logger.info("Checking New Remittance Radio button P2B is not selected");
				Assert.assertTrue(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2B(),"Checking RadioButton P2B is selected or not");
				 logger.info("New Remittance Radio button P2B is not selected");
				 logger.info("Checking New Remittance Radio button B2B is not selected");
				 Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2B(),"Checking RadioButton B2B is selected or not");
				 logger.info("New Remittance Radio button B2B is not selected");
				 logger.info("Checking New Remittance Radio button B2P is not selected");
				 Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2P(),"Checking RadioButton B2P is selected or not");
				 logger.info("New Remittance Radio button B2P is not selected");
				 logger.info("Checking Purpose of Remittance inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPurposeOfRemittanceInputBox(),"Checking purpose of Remittance inputbox is present or not");
				 logger.info("Purpose of Remittance inputbox is present");
				 
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithSalary();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithBusinessFund();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithOther();
				 logger.info("Checking Other Purpose inputbox is present");
				// Assert.assertTrue(validateNewRemittanceButton.checkPurposeOtherInputbox(),"Checking other purpose inputbox is present or not");
				 logger.info("Other Purpose inputbox is present");
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithPesonel();
				 logger.info("Checking Sender dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDropdownIsPresent(),"Checking Sender dropdown is present or not");
				 logger.info("Sender dropdown is present");
				 logger.info("Checking Target Country dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkTargetCountryDropdownIsPresent(),"Checking Target country dropdown is present or not");
				 logger.info("Target Country dropdown is present");
				 validateNewRemittanceButton.enterSenderName();
				 validateNewRemittanceButton.enterTargetCountryName();
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetails(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailFirstName(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailLastName(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhone(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCity(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvince(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountry(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddress(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 validateNewRemittanceButton.clickAddNewDocument();
				 logger.info("Checking Document Type inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentTypeInputbox(),"Checking document type inputbox is present or not");
				 logger.info("Document Type inputbox is present");
				 validateNewRemittanceButton.checkAddDocumentAdhaar();
				 validateNewRemittanceButton.checkAddDocumentPassport();
				 validateNewRemittanceButton.checkAddDocumentDrivingLicence();
				 validateNewRemittanceButton.checkAddDocumentPanCard();
				 logger.info("Checking Document Name inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentNameInputbox(),"Checking document name inputbox is present or not");
				 logger.info("Document Name inputbox is present");
				 validateNewRemittanceButton.enterDocumentName(faker.name().firstName());
				 logger.info("Checking Document upload Inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentUploadBox(),"Checking document upload inputbox is present or not");
				 logger.info("Document upload Inputbox is present");
				 validateNewRemittanceButton.uploadDocumentFromLocal();
				 logger.info("Checking Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkCancelButton(),"Checking document upload page cancel button is present or not");
				 logger.info("Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkUploadButton(),"Checking document upload page upload button is present or not");
				 logger.info("Document upload page Upload button is present");
				 validateNewRemittanceButton.clickUploadButton();
				 
				 logger.info("Checking File Preview button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFilePreviewButton(),"Checking file preview button is present or not");
				 logger.info("File Preview button is present");
				 logger.info("Checking File Delete button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFileDeleteButton(),"Checking file delete button is present or not");
				 logger.info("File Delete button is present");
				 logger.info("Checking Sender Declarataion  check box is present");
				 Assert.assertFalse(validateNewRemittanceButton.checkSenderDeclarationCheckbox(),"Checking sender declaration checkbox is present or not");
				 logger.info("Sender Declaration  checkbox is present");
				
				validateNewRemittanceButton.clickSenderDeclarationCheckbox();
				 validateNewRemittanceButton.clickUploadedFileImage();
				 validateNewRemittanceButton.clickClientInfoPageNextButton();
				 logger.info("Checking Recipient info page is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientInfoPage(),"Checking Recipient info page is present or not");
				 logger.info("Recipient info page is present");
				 logger.info("Checking EndBenificiary name box is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryNameBox(),"Checking End benifiaciary name box is present or not");
				 logger.info("End benificiary name box is present");
				 logger.info("Checking End Beneficiary Account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryAccountNumBox(),"Checking End benifiaciary account number box is present or not");
				 logger.info("End Beneficiary Account number is present");
				 validateNewRemittanceButton.enterEndBenificiaryName();
				 validateNewRemittanceButton.enterEndBenificiaryAccountNum();
				 logger.info("Checking Recipient Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientDetails(), "Recipient Details","Checking Recipient details header is Present or not");
				 logger.info("Recipient Details  is present");
				 logger.info("Checking Recipient Firstname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBusinessname(), "Business Name","Checking Recipient firstname is Present or not");
				 logger.info("Recipient Firstname  is present");
				 logger.info("Checking Recipient Lastname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientPrimaryContactname(), "Primary Contact Name","Checking Recipient lastname Actions is Present or not");
				 logger.info("Recipient Lastname  is present");
				 logger.info("Checking Recipient Phone number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientPhone(), "Phone","Checking Recipient phone number is Present or not");
				 logger.info("Recipient Phone number  is present");
				 logger.info("Checking Recipient City  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCity(), "City","Checking Recipient city is Present or not");
				 logger.info("Recipient City  is present");
				 logger.info("Checking Recipient Province  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientProvince(), "Province","Checking Recipient province is Present or not");
				 logger.info("Recipient Province  is present");
				 logger.info("Checking Recipient Country  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCountry(), "Country","Checking Recipient country is Present or not");
				 logger.info("Recipient Country  is present");
				 logger.info("Checking Recipient Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientAddress(), "Address","Checking Recipient address is Present or not");
				 logger.info("Recipient Address  is present");
				 logger.info("Checking Recipient Financial Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientFinancialDetails(), "Financial Details","Checking Recipient financial details header is Present or not");
				 logger.info("Recipient Financial Details  is present");
				 logger.info("Checking Recipient Bank name  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankNames(), "Bank Name","Checking Recipient bank name is Present or not");
				 logger.info("Recipient Bank name  is present");
				 logger.info("Checking Recipient Bank Branch  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankBranch(), "Branch","Checking Recipient bank branch is Present or not");
				 logger.info("Recipient Bank Branch  is present");
				 logger.info("Checking Recipient Bank Account number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAcNum(), "Account Number","Checking Recipient bank account number is Present or not");
				 logger.info("Recipient Bank Account number  is present");
				 logger.info("Checking Recipient Bank LEI code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankLEICode(), "LEI Code","Checking Recipient bank LEI code is Present or not");
				 logger.info("Recipient Bank LEI code  is present");
				 logger.info("Checking Recipient Bank IBAN  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIBAN(), "IBAN","Checking Recipient bank IBAN is Present or not");
				 logger.info("Recipient Bank IBAN  is present");
				 logger.info("Checking Recipient Bank Swift BIC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankSwiftBICcode(), "SWIFT BIC Code","Checking Recipient bank swift BIC code is Present or not");
				 logger.info("Recipient Bank Swift BIC code  is present");
				 logger.info("Checking Recipient Bank Transit number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankTransitNum(), "Transit Number","Checking Recipient Transit number is Present or not");
				 logger.info("Recipient Bank Transit number  is present");
				 logger.info("Checking Recipient Bank ABA Routing number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankABARoutingNum(), "ABA Routing Number","Checking Recipient bank ABA Routing code is Present or not");
				 logger.info("Recipient Bank ABA Routing number  is present");
				 logger.info("Checking Recipient Bank IFSC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIFSCcode(), "IFSC Code","Checking Recipient bank IFSC code is Present or not");
				 logger.info("Recipient Bank IFSC code  is present");
				 logger.info("Checking Recipient Bank Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAddress(), "Address","Checking Recipient bank address is Present or not");
				 logger.info("Recipient Bank Address  is present");
				 logger.info("Checking Recipient page Back button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoBackButton(),"Checking Recipient info page Back button is Present or not");
				 logger.info("Recipient page Back button  is present");
				 logger.info("Checking Recipient page next button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoNextButton(),"Checking Recipient info page Next button is Present or not");
				 logger.info("Recipient page Next button is present");
				 validateNewRemittanceButton.clickRecipientInfoPageNextButton();
				 logger.info("Checking Transfer Details page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckTransferDetailPage(), "Transfer Details","Checking Transfer Detail page is Present or not");
				 logger.info("Transfer Details page  is present");
				 logger.info("Checking Amount Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAmountToRemitbox(),"Checking amount Remit Box is present or not");
				 logger.info("Amount Remit box is present");
				 logger.info("Checking Currency Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyRemitbox(),"Checking currency Remit Box is present or not");
				 logger.info("Currency Remit box  is present");
				 logger.info("Checking Amount Receive MTO box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckamountToReceivebox(),"Checking amount Receive MTO Box is present or not");
				 logger.info("Amount Receive MTO box  is present");
				 logger.info("Checking Currency Receive box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyReceivebox(),"Checking currency Receive Box is present or not"); 
				 logger.info("Currency Receive box  is present");
				 logger.info("Checking Operating wallet box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckOperatingWalletbox(),"Checking operating wallet Box is present or not");
				 logger.info("Operating wallet box  is present");
				 validateNewRemittanceButton.enterRecipientMTOBox();
				 validateNewRemittanceButton.enterAmountToRemit();
				 validateNewRemittanceButton.enterOperatingWallet();
				 validateNewRemittanceButton.enterCustomerPaidTypeCash();
				 validateNewRemittanceButton.enterCustomerPaidTypePaypal();
				 validateNewRemittanceButton.enterCustomerPaidTypeOthers();
				 logger.info("Checking Customer Paid Type Other specification box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCustomerPaidTypeOtherSpecBox(),"Checking Recipient Customer paid type other specification box is present or not");
				 logger.info("Customer Paid Type Other specification box is present");
				 validateNewRemittanceButton.enterCustomerPaidTypeBank();
				 logger.info("Checking Balance is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalance(),"Checking Balance is present or not");
				 logger.info("Balance is present");
				 logger.info("Checking Balance Amount is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalanceAmount(),"Checking Balance Amount is present or not");
				 logger.info("Balance Amount is present");
				 logger.info("Checking Add money button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAddMoneyButton(),"Checking Add money button is present or not");
				 logger.info("Add money button is present");
				 logger.info("Checking Refresh button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRefreshButton(),"Checking Refresh buttonis present or not");
				 logger.info("Refresh button is present");
				
				 logger.info("Checking Wallet Balance is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckWalletBalanceIsDisplayed(), "MTO Balance","Checking wallet balance is present or not");
				 logger.info("Wallet Balance is present");
				/* validateNewRemittanceButton.clickAddMoneyButton();
				 validateNewRemittanceButton.enterAddMoneyFromAmount();
				 validateNewRemittanceButton.enterAddMoneyRemark();
				 validateNewRemittanceButton.clickAddMoneyNextButton();
				 validateNewRemittanceButton.enterUserPassword();
				 validateNewRemittanceButton.clickTransferButton();*/
				 validateNewRemittanceButton.enterSenderMTOFeeAmount();
				 logger.info("Checking Transfer page Cancel  button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageCancelButton(),"Checking Transfer page Cancel Button is present or not");
				 logger.info("Transfer page cancel button is present");
				 logger.info("Checking Transfer page Next button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageNextButton(),"Checking Transfer page Next Button is present or not");
				 logger.info("Transfer page Next  button is present"); 
				 validateNewRemittanceButton.clickTransferPageNextButton();
				 logger.info("Checking Preview and Submit page is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkPreviewAndSubmitPage(),"Checking Preview and Submit page is present or not");
				 logger.info("Preview and Submit page is present");
				 logger.info("Checking Remittance Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceDetails(),"Checking Remittance details header is present or not");
				 logger.info("Remittance Details is present");
				 logger.info("Checking Remittance Amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceAmount(),"Checking Remittance Amount is present or not");
				 logger.info("Remittance Amount is present");
				 logger.info("Checking Sender MTO fee is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderMTOfee(),"Checking Sender MTO fee is present or not");
				 logger.info("Sender MTO fee is present");
				 logger.info("Checking Remittance total deposit amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkTotalDepositAmount(),"Checking Remittance total deposit amount is present or not");
				 logger.info("Remittance total deposit amount  is present");
				 logger.info("Checking Remittance payout is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkAmountPayout(),"Checking Remittance payout is present or not");
				 logger.info("Remittance payout is present");
				 logger.info("Checking Remittance deposit type is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkDepositType(),"Checking Remittance deposit type is present or not");
				 logger.info("Remittance deposit type is present");
				 logger.info("Checking Remittance purpose is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittancePurpose(),"Checking Remittance purpose is present or not");
				 logger.info("Remittance purpose is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkConversionRate(),"Checking Remittance conversion rate is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceType(),"Checking Remittance type is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance date is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittaneDate(),"Checking Remittance date is present or not");
				 logger.info("Remittance date is present");
				 logger.info("Checking Remittance created by  is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceCreatedby(),"Checking Remittance created by is present or not");
				 logger.info("Remittance created by is present");
				 
				
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailsFinalPreview(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailFirstNameFinalPreview(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailLastNameFinalPreview(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhoneFinalPreview(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCityFinalPreview(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvinceFinalPreview(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountryFinalPreview(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddressFinalPreview(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 logger.info("Checking Sender Document is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailDocumentsFinalPreview(),"Checking Document of the sender is present or not");
				 logger.info("Sender Document is present");
				 
				 
				 logger.info("Checking Recipient Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientDetailsFinalPreview(),"Checking Recipient details header is present or not");
				 logger.info("Recipient Details is present");
				 logger.info("Checking Recipient Firstname is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientBusinessNameFinalPreview(),"Checking firstname of the Recipient is present or not");
				 logger.info("Recipient Firstname is present");
				 logger.info("Checking Recipient Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientPrimaryContactNameFinalPreview(),"Checking lastname of the Recipient is present or not");
				 logger.info("Recipient Lastname is present");
				 logger.info("Checking Recipient Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientPhoneFinalPreview(),"Checking phone number of the Recipient  is present or not");
				 logger.info("Recipient Phonenumber is present");
				 logger.info("Checking Recipient City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCityFinalPreview(),"Checking city of the Recipient is present or not");
				 logger.info("Recipient City is present");
				 logger.info("Checking Recipient Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientProvinceFinalPreview(),"Checking province of the Recipient  is present or not");
				 logger.info("Recipient Province is present");
				 logger.info("Checking Recipient Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCountryFinalPreview(),"Checking country of the Recipient is present or not");
				 logger.info("Recipient Country is present");
				 logger.info("Checking Recipient Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientAddressFinalPreview(),"Checking address of the Recipient is present or not");
				 logger.info("Recipient Address is present");
				 
				 logger.info("Checking Financial Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkFinancialDetailsFinalPreview(),"Checking Financial details header is present or not");
				 logger.info("Financial Details is present");
				 logger.info("Checking Bank name is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankNameFinalPreview(),"Checking Bank name of the Recipient is present or not");
				 logger.info("Bank name is present");
				 logger.info("Checking Recipient Bank branch is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientBankBranchFinalPreview(),"Checking Bank branch of the Recipient is present or not");
				 logger.info("Bank branch is present");
				 logger.info("Checking Bank account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAcNumFinalPreview(),"Checking Bank account number of the Recipient  is present or not");
				 logger.info("Bank account number is present");
				 logger.info("Checking Bank LEI code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankLEICodeFinalPreview(),"Checking Bank LEI code of the Recipient is present or not");
				 logger.info("Bank LEI code is present");
				 logger.info("Checking Bank IBAN is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIBANFinalPreview(),"Checking Bank IBAN of the Recipient  is present or not");
				 logger.info("Bank IBAN is present");
				 logger.info("Checking Bank swift BIC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankSwiftBICcodeFinalPreview(),"Checking Bank swift BIC code of the Recipient is present or not");
				 logger.info("Bank swift BIC code is present");
				 logger.info("Checking Bank transit number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankTransitNumFinalPreview(),"Checking Bank transit number of the Recipient is present or not");
				 logger.info("Bank transit number is present");	 
				 logger.info("Checking Bank ABA Routing number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankABARoutingNumFinalPreview(),"Checking Bank ABA Routing number of the Recipient  is present or not");
				 logger.info("Bank ABA Routing number is present");
				 logger.info("Checking Bank IFSC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIFSCcodeFinalPreview(),"Checking Bank IFSC code of the Recipient is present or not");
				 logger.info("Bank IFSC code is present");
				 logger.info("Checking Bank address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAddressFinalPreview(),"Checking Bank address is present or not");
				 logger.info("Bank address number is present");
				validateNewRemittanceButton.clickConfirmAndSubmitButton();
		 }
		 @Test(priority = 15,enabled=true)
			public void ValidateNewRemittanceButtonTypeB2B() throws AWTException, InterruptedException {
				logger.info("This is to validate the New Remittance button functional flow");
				validateNewRemittanceButton=new ValidateNewRemittanceButtonFunctionPage(driver);
				validateNewRemittanceButton.enterUserEmailId(Constants.username);
				validateNewRemittanceButton.enterPassword(Constants.commonPassword);
				validateNewRemittanceButton.clickSignupButton();
				validateNewRemittanceButton.clickRemittanceDropdownButton();
				logger.info("Checking Outward buttons is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkOutwardButtonIsDisplayed(),"Checking Outward button is present or not");
			    logger.info("Outward button is present");
			    logger.info("Checking Inward button is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkInwardButtonIsDisplayed(),"Checking Inward button is present or not");
			    logger.info("Inward button is present");
				 validateNewRemittanceButton.clickOutwardButton();
				 logger.info("Checking AllRemittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkAllRemittanceButtonIsDisplayed(),"Checking AllRemittance button is present or not");
				 logger.info("AllRemittance button is present");
				 logger.info("Checking Pending Customer Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPendingCustomerRemittanceButtonIsDisplayed(),"Checking Pending customer Remittance button is present or not");
				 logger.info("Pending Customer Remittance button is present");
				 validateNewRemittanceButton.clickallRemittanceButton();
				 logger.info("Checking Outward Remittance page Title is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitlePage(), "Outward Remittance","Checking outward Remittance title is Present or not");
				 logger.info("Outward Remittance page Title is present");
				 logger.info("Checking Outward Remittance page Title sub message is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitleSubMessage(), "View your remittance requests","Checking outward Remittance title submessage is Present or not");
				 logger.info("Outward Remittance page Title sub message is present");
				 logger.info("Checking New Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkNewRemittanceButtonIsDisplayed(),"Checking New Remittance button is present or not");
				 logger.info("New Remittance button is present");
				 validateNewRemittanceButton.clickNewRemittanceButton();
				 logger.info("Checking New Remittance Client info page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckClientInfoPage(), "Client Info","Checking client Info page is present or not");
				 logger.info("New Remittance Client info is present");
				 validateNewRemittanceButton.clickRemittanceTypeRadioButtonB2B();
				 logger.info("Checking New Remittance Radio button P2P is selected");
				Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2P(),"Checking RadioButton P2P is selected or not");
				 logger.info("New Remittance Radio button P2P is selected");
				 logger.info("Checking New Remittance Radio button P2B is not selected");
				Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2B(),"Checking RadioButton P2B is selected or not");
				 logger.info("New Remittance Radio button P2B is not selected");
				 logger.info("Checking New Remittance Radio button B2B is not selected");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2B(),"Checking RadioButton B2B is selected or not");
				 logger.info("New Remittance Radio button B2B is not selected");
				 logger.info("Checking New Remittance Radio button B2P is not selected");
				 Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2P(),"Checking RadioButton B2P is selected or not");
				 logger.info("New Remittance Radio button B2P is not selected");
				 logger.info("Checking Purpose of Remittance inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPurposeOfRemittanceInputBox(),"Checking purpose of Remittance inputbox is present or not");
				 logger.info("Purpose of Remittance inputbox is present");
				 
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithSalary();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithBusinessFund();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithOther();
				 logger.info("Checking Other Purpose inputbox is present");
				// Assert.assertTrue(validateNewRemittanceButton.checkPurposeOtherInputbox(),"Checking other purpose inputbox is present or not");
				 logger.info("Other Purpose inputbox is present");
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithPesonel();
				 logger.info("Checking Sender dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDropdownIsPresent(),"Checking Sender dropdown is present or not");
				 logger.info("Sender dropdown is present");
				 logger.info("Checking Target Country dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkTargetCountryDropdownIsPresent(),"Checking Target country dropdown is present or not");
				 logger.info("Target Country dropdown is present");
				 validateNewRemittanceButton.enterSenderName();
				 validateNewRemittanceButton.enterTargetCountryName();
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetails(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailBusinessName(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPrimaryContactName(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhone(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCity(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvince(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountry(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddress(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 validateNewRemittanceButton.clickAddNewDocument();
				 logger.info("Checking Document Type inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentTypeInputbox(),"Checking document type inputbox is present or not");
				 logger.info("Document Type inputbox is present");
				 validateNewRemittanceButton.checkAddDocumentAdhaar();
				 validateNewRemittanceButton.checkAddDocumentPassport();
				 validateNewRemittanceButton.checkAddDocumentDrivingLicence();
				 validateNewRemittanceButton.checkAddDocumentPanCard();
				 logger.info("Checking Document Name inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentNameInputbox(),"Checking document name inputbox is present or not");
				 logger.info("Document Name inputbox is present");
				 validateNewRemittanceButton.enterDocumentName(faker.name().firstName());
				 logger.info("Checking Document upload Inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentUploadBox(),"Checking document upload inputbox is present or not");
				 logger.info("Document upload Inputbox is present");
				 validateNewRemittanceButton.uploadDocumentFromLocal();
				 logger.info("Checking Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkCancelButton(),"Checking document upload page cancel button is present or not");
				 logger.info("Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkUploadButton(),"Checking document upload page upload button is present or not");
				 logger.info("Document upload page Upload button is present");
				 validateNewRemittanceButton.clickUploadButton();
				 
				 logger.info("Checking File Preview button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFilePreviewButton(),"Checking file preview button is present or not");
				 logger.info("File Preview button is present");
				 logger.info("Checking File Delete button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFileDeleteButton(),"Checking file delete button is present or not");
				 logger.info("File Delete button is present");
				 logger.info("Checking Sender Declarataion  check box is present");
				 Assert.assertFalse(validateNewRemittanceButton.checkSenderDeclarationCheckbox(),"Checking sender declaration checkbox is present or not");
				 logger.info("Sender Declaration  checkbox is present");
				
				validateNewRemittanceButton.clickSenderDeclarationCheckbox();
				 validateNewRemittanceButton.clickUploadedFileImage();
				 validateNewRemittanceButton.clickClientInfoPageNextButton();
				 logger.info("Checking Recipient info page is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientInfoPage(),"Checking Recipient info page is present or not");
				 logger.info("Recipient info page is present");
				 logger.info("Checking EndBenificiary name box is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryNameBox(),"Checking End benifiaciary name box is present or not");
				 logger.info("End benificiary name box is present");
				 logger.info("Checking End Beneficiary Account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryAccountNumBox(),"Checking End benifiaciary account number box is present or not");
				 logger.info("End Beneficiary Account number is present");
				 validateNewRemittanceButton.enterEndBenificiaryName();
				 validateNewRemittanceButton.enterEndBenificiaryAccountNum();
				 logger.info("Checking Recipient Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientDetails(), "Recipient Details","Checking Recipient details header is Present or not");
				 logger.info("Recipient Details  is present");
				 logger.info("Checking Recipient Firstname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBusinessname(), "Business Name","Checking Recipient firstname is Present or not");
				 logger.info("Recipient Firstname  is present");
				 logger.info("Checking Recipient Lastname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientPrimaryContactname(), "Primary Contact Name","Checking Recipient lastname Actions is Present or not");
				 logger.info("Recipient Lastname  is present");
				 logger.info("Checking Recipient Phone number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientPhone(), "Phone","Checking Recipient phone number is Present or not");
				 logger.info("Recipient Phone number  is present");
				 logger.info("Checking Recipient City  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCity(), "City","Checking Recipient city is Present or not");
				 logger.info("Recipient City  is present");
				 logger.info("Checking Recipient Province  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientProvince(), "Province","Checking Recipient province is Present or not");
				 logger.info("Recipient Province  is present");
				 logger.info("Checking Recipient Country  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCountry(), "Country","Checking Recipient country is Present or not");
				 logger.info("Recipient Country  is present");
				 logger.info("Checking Recipient Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientAddress(), "Address","Checking Recipient address is Present or not");
				 logger.info("Recipient Address  is present");
				 logger.info("Checking Recipient Financial Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientFinancialDetails(), "Financial Details","Checking Recipient financial details header is Present or not");
				 logger.info("Recipient Financial Details  is present");
				 logger.info("Checking Recipient Bank name  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankNames(), "Bank Name","Checking Recipient bank name is Present or not");
				 logger.info("Recipient Bank name  is present");
				 logger.info("Checking Recipient Bank Branch  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankBranch(), "Branch","Checking Recipient bank branch is Present or not");
				 logger.info("Recipient Bank Branch  is present");
				 logger.info("Checking Recipient Bank Account number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAcNum(), "Account Number","Checking Recipient bank account number is Present or not");
				 logger.info("Recipient Bank Account number  is present");
				 logger.info("Checking Recipient Bank LEI code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankLEICode(), "LEI Code","Checking Recipient bank LEI code is Present or not");
				 logger.info("Recipient Bank LEI code  is present");
				 logger.info("Checking Recipient Bank IBAN  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIBAN(), "IBAN","Checking Recipient bank IBAN is Present or not");
				 logger.info("Recipient Bank IBAN  is present");
				 logger.info("Checking Recipient Bank Swift BIC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankSwiftBICcode(), "SWIFT BIC Code","Checking Recipient bank swift BIC code is Present or not");
				 logger.info("Recipient Bank Swift BIC code  is present");
				 logger.info("Checking Recipient Bank Transit number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankTransitNum(), "Transit Number","Checking Recipient Transit number is Present or not");
				 logger.info("Recipient Bank Transit number  is present");
				 logger.info("Checking Recipient Bank ABA Routing number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankABARoutingNum(), "ABA Routing Number","Checking Recipient bank ABA Routing code is Present or not");
				 logger.info("Recipient Bank ABA Routing number  is present");
				 logger.info("Checking Recipient Bank IFSC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIFSCcode(), "IFSC Code","Checking Recipient bank IFSC code is Present or not");
				 logger.info("Recipient Bank IFSC code  is present");
				 logger.info("Checking Recipient Bank Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAddress(), "Address","Checking Recipient bank address is Present or not");
				 logger.info("Recipient Bank Address  is present");
				 logger.info("Checking Recipient page Back button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoBackButton(),"Checking Recipient info page Back button is Present or not");
				 logger.info("Recipient page Back button  is present");
				 logger.info("Checking Recipient page next button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoNextButton(),"Checking Recipient info page Next button is Present or not");
				 logger.info("Recipient page Next button is present");
				 validateNewRemittanceButton.clickRecipientInfoPageNextButton();
				 logger.info("Checking Transfer Details page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckTransferDetailPage(), "Transfer Details","Checking Transfer Detail page is Present or not");
				 logger.info("Transfer Details page  is present");
				 logger.info("Checking Amount Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAmountToRemitbox(),"Checking amount Remit Box is present or not");
				 logger.info("Amount Remit box is present");
				 logger.info("Checking Currency Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyRemitbox(),"Checking currency Remit Box is present or not");
				 logger.info("Currency Remit box  is present");
				 logger.info("Checking Amount Receive MTO box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckamountToReceivebox(),"Checking amount Receive MTO Box is present or not");
				 logger.info("Amount Receive MTO box  is present");
				 logger.info("Checking Currency Receive box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyReceivebox(),"Checking currency Receive Box is present or not"); 
				 logger.info("Currency Receive box  is present");
				 logger.info("Checking Operating wallet box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckOperatingWalletbox(),"Checking operating wallet Box is present or not");
				 logger.info("Operating wallet box  is present");
				 validateNewRemittanceButton.enterRecipientMTOBox();
				 validateNewRemittanceButton.enterAmountToRemit();
				 validateNewRemittanceButton.enterOperatingWallet();
				 validateNewRemittanceButton.enterCustomerPaidTypeCash();
				 validateNewRemittanceButton.enterCustomerPaidTypePaypal();
				 validateNewRemittanceButton.enterCustomerPaidTypeOthers();
				 logger.info("Checking Customer Paid Type Other specification box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCustomerPaidTypeOtherSpecBox(),"Checking Recipient Customer paid type other specification box is present or not");
				 logger.info("Customer Paid Type Other specification box is present");
				 validateNewRemittanceButton.enterCustomerPaidTypeBank();
				 logger.info("Checking Balance is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalance(),"Checking Balance is present or not");
				 logger.info("Balance is present");
				 logger.info("Checking Balance Amount is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalanceAmount(),"Checking Balance Amount is present or not");
				 logger.info("Balance Amount is present");
				 logger.info("Checking Add money button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAddMoneyButton(),"Checking Add money button is present or not");
				 logger.info("Add money button is present");
				 logger.info("Checking Refresh button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRefreshButton(),"Checking Refresh buttonis present or not");
				 logger.info("Refresh button is present");
				
				 logger.info("Checking Wallet Balance is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckWalletBalanceIsDisplayed(), "MTO Balance","Checking wallet balance is present or not");
				 logger.info("Wallet Balance is present");
				/* validateNewRemittanceButton.clickAddMoneyButton();
				 validateNewRemittanceButton.enterAddMoneyFromAmount();
				 validateNewRemittanceButton.enterAddMoneyRemark();
				 validateNewRemittanceButton.clickAddMoneyNextButton();
				 validateNewRemittanceButton.enterUserPassword();
				 validateNewRemittanceButton.clickTransferButton();*/
				 validateNewRemittanceButton.enterSenderMTOFeeAmount();
				 logger.info("Checking Transfer page Cancel  button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageCancelButton(),"Checking Transfer page Cancel Button is present or not");
				 logger.info("Transfer page cancel button is present");
				 logger.info("Checking Transfer page Next button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageNextButton(),"Checking Transfer page Next Button is present or not");
				 logger.info("Transfer page Next  button is present"); 
				 validateNewRemittanceButton.clickTransferPageNextButton();
				 logger.info("Checking Preview and Submit page is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkPreviewAndSubmitPage(),"Checking Preview and Submit page is present or not");
				 logger.info("Preview and Submit page is present");
				 logger.info("Checking Remittance Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceDetails(),"Checking Remittance details header is present or not");
				 logger.info("Remittance Details is present");
				 logger.info("Checking Remittance Amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceAmount(),"Checking Remittance Amount is present or not");
				 logger.info("Remittance Amount is present");
				 logger.info("Checking Sender MTO fee is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderMTOfee(),"Checking Sender MTO fee is present or not");
				 logger.info("Sender MTO fee is present");
				 logger.info("Checking Remittance total deposit amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkTotalDepositAmount(),"Checking Remittance total deposit amount is present or not");
				 logger.info("Remittance total deposit amount  is present");
				 logger.info("Checking Remittance payout is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkAmountPayout(),"Checking Remittance payout is present or not");
				 logger.info("Remittance payout is present");
				 logger.info("Checking Remittance deposit type is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkDepositType(),"Checking Remittance deposit type is present or not");
				 logger.info("Remittance deposit type is present");
				 logger.info("Checking Remittance purpose is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittancePurpose(),"Checking Remittance purpose is present or not");
				 logger.info("Remittance purpose is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkConversionRate(),"Checking Remittance conversion rate is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceType(),"Checking Remittance type is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance date is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittaneDate(),"Checking Remittance date is present or not");
				 logger.info("Remittance date is present");
				 logger.info("Checking Remittance created by  is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceCreatedby(),"Checking Remittance created by is present or not");
				 logger.info("Remittance created by is present");
				 
				
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailsFinalPreview(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderBusinessNameFinalPreview(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPrimaryContactNameFinalPreview(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhoneFinalPreview(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCityFinalPreview(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvinceFinalPreview(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountryFinalPreview(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddressFinalPreview(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 logger.info("Checking Sender Document is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailDocumentsFinalPreview(),"Checking Document of the sender is present or not");
				 logger.info("Sender Document is present");
				 
				 
				 logger.info("Checking Recipient Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientDetailsFinalPreview(),"Checking Recipient details header is present or not");
				 logger.info("Recipient Details is present");
				 logger.info("Checking Recipient Firstname is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientBusinessNameFinalPreview(),"Checking Business name of the Recipient is present or not");
				 logger.info("Recipient Firstname is present");
				 logger.info("Checking Recipient Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientPrimaryContactNameFinalPreview(),"Checking Primary contact name of the Recipient is present or not");
				 logger.info("Recipient Lastname is present");
				 logger.info("Checking Recipient Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientPhoneFinalPreview(),"Checking phone number of the Recipient  is present or not");
				 logger.info("Recipient Phonenumber is present");
				 logger.info("Checking Recipient City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCityFinalPreview(),"Checking city of the Recipient is present or not");
				 logger.info("Recipient City is present");
				 logger.info("Checking Recipient Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientProvinceFinalPreview(),"Checking province of the Recipient  is present or not");
				 logger.info("Recipient Province is present");
				 logger.info("Checking Recipient Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCountryFinalPreview(),"Checking country of the Recipient is present or not");
				 logger.info("Recipient Country is present");
				 logger.info("Checking Recipient Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientAddressFinalPreview(),"Checking address of the Recipient is present or not");
				 logger.info("Recipient Address is present");
				 
				 logger.info("Checking Financial Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkFinancialDetailsFinalPreview(),"Checking Financial details header is present or not");
				 logger.info("Financial Details is present");
				 logger.info("Checking Bank name is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankNameFinalPreview(),"Checking Bank name of the Recipient is present or not");
				 logger.info("Bank name is present");
				 logger.info("Checking Recipient Bank branch is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientBankBranchFinalPreview(),"Checking Bank branch of the Recipient is present or not");
				 logger.info("Bank branch is present");
				 logger.info("Checking Bank account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAcNumFinalPreview(),"Checking Bank account number of the Recipient  is present or not");
				 logger.info("Bank account number is present");
				 logger.info("Checking Bank LEI code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankLEICodeFinalPreview(),"Checking Bank LEI code of the Recipient is present or not");
				 logger.info("Bank LEI code is present");
				 logger.info("Checking Bank IBAN is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIBANFinalPreview(),"Checking Bank IBAN of the Recipient  is present or not");
				 logger.info("Bank IBAN is present");
				 logger.info("Checking Bank swift BIC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankSwiftBICcodeFinalPreview(),"Checking Bank swift BIC code of the Recipient is present or not");
				 logger.info("Bank swift BIC code is present");
				 logger.info("Checking Bank transit number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankTransitNumFinalPreview(),"Checking Bank transit number of the Recipient is present or not");
				 logger.info("Bank transit number is present");	 
				 logger.info("Checking Bank ABA Routing number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankABARoutingNumFinalPreview(),"Checking Bank ABA Routing number of the Recipient  is present or not");
				 logger.info("Bank ABA Routing number is present");
				 logger.info("Checking Bank IFSC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIFSCcodeFinalPreview(),"Checking Bank IFSC code of the Recipient is present or not");
				 logger.info("Bank IFSC code is present");
				 logger.info("Checking Bank address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAddressFinalPreview(),"Checking Bank address is present or not");
				 logger.info("Bank address number is present");
				validateNewRemittanceButton.clickConfirmAndSubmitButton();
		 }
		 @Test(priority = 16,enabled=true)
			public void ValidateNewRemittanceButtonTypeB2P() throws AWTException, InterruptedException {
				logger.info("This is to validate the New Remittance button functional flow");
				validateNewRemittanceButton=new ValidateNewRemittanceButtonFunctionPage(driver);
				validateNewRemittanceButton.enterUserEmailId(Constants.username);
				validateNewRemittanceButton.enterPassword(Constants.commonPassword);
				validateNewRemittanceButton.clickSignupButton();
				validateNewRemittanceButton.clickRemittanceDropdownButton();
				logger.info("Checking Outward buttons is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkOutwardButtonIsDisplayed(),"Checking Outward button is present or not");
			    logger.info("Outward button is present");
			    logger.info("Checking Inward button is present");
			    Assert.assertTrue(validateNewRemittanceButton.checkInwardButtonIsDisplayed(),"Checking Inward button is present or not");
			    logger.info("Inward button is present");
				 validateNewRemittanceButton.clickOutwardButton();
				 logger.info("Checking AllRemittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkAllRemittanceButtonIsDisplayed(),"Checking AllRemittance button is present or not");
				 logger.info("AllRemittance button is present");
				 logger.info("Checking Pending Customer Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPendingCustomerRemittanceButtonIsDisplayed(),"Checking Pending customer Remittance button is present or not");
				 logger.info("Pending Customer Remittance button is present");
				 validateNewRemittanceButton.clickallRemittanceButton();
				 logger.info("Checking Outward Remittance page Title is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitlePage(), "Outward Remittance","Checking outward Remittance title is Present or not");
				 logger.info("Outward Remittance page Title is present");
				 logger.info("Checking Outward Remittance page Title sub message is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckOutwardRemittanceTitleSubMessage(), "View your remittance requests","Checking outward Remittance title submessage is Present or not");
				 logger.info("Outward Remittance page Title sub message is present");
				 logger.info("Checking New Remittance button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkNewRemittanceButtonIsDisplayed(),"Checking New Remittance button is present or not");
				 logger.info("New Remittance button is present");
				 validateNewRemittanceButton.clickNewRemittanceButton();
				 logger.info("Checking New Remittance Client info page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckClientInfoPage(), "Client Info","Checking client Info page is present or not");
				 logger.info("New Remittance Client info is present");
				 validateNewRemittanceButton.clickRemittanceTypeRadioButtonB2P();
				 logger.info("Checking New Remittance Radio button P2P is selected");
				Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2P(),"Checking RadioButton P2P is selected or not");
				 logger.info("New Remittance Radio button P2P is selected");
				 logger.info("Checking New Remittance Radio button P2B is not selected");
				Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonP2B(),"Checking RadioButton P2B is selected or not");
				 logger.info("New Remittance Radio button P2B is not selected");
				 logger.info("Checking New Remittance Radio button B2B is not selected");
				 Assert.assertFalse(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2B(),"Checking RadioButton B2B is selected or not");
				 logger.info("New Remittance Radio button B2B is not selected");
				 logger.info("Checking New Remittance Radio button B2P is not selected");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceTypeRadioButtonB2P(),"Checking RadioButton B2P is selected or not");
				 logger.info("New Remittance Radio button B2P is not selected");
				 logger.info("Checking Purpose of Remittance inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkPurposeOfRemittanceInputBox(),"Checking purpose of Remittance inputbox is present or not");
				 logger.info("Purpose of Remittance inputbox is present");
				 
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithSalary();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithBusinessFund();
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithOther();
				 logger.info("Checking Other Purpose inputbox is present");
				// Assert.assertTrue(validateNewRemittanceButton.checkPurposeOtherInputbox(),"Checking other purpose inputbox is present or not");
				 logger.info("Other Purpose inputbox is present");
				 validateNewRemittanceButton.enterPurposeOfRemittanceInputboxWithPesonel();
				 logger.info("Checking Sender dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDropdownIsPresent(),"Checking Sender dropdown is present or not");
				 logger.info("Sender dropdown is present");
				 logger.info("Checking Target Country dropdown is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkTargetCountryDropdownIsPresent(),"Checking Target country dropdown is present or not");
				 logger.info("Target Country dropdown is present");
				 validateNewRemittanceButton.enterSenderName();
				 validateNewRemittanceButton.enterTargetCountryName();
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetails(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailBusinessName(),"Checking Business name of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPrimaryContactName(),"Checking Primary contact name of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhone(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCity(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvince(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountry(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddress(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 validateNewRemittanceButton.clickAddNewDocument();
				 logger.info("Checking Document Type inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentTypeInputbox(),"Checking document type inputbox is present or not");
				 logger.info("Document Type inputbox is present");
				 validateNewRemittanceButton.checkAddDocumentAdhaar();
				 validateNewRemittanceButton.checkAddDocumentPassport();
				 validateNewRemittanceButton.checkAddDocumentDrivingLicence();
				 validateNewRemittanceButton.checkAddDocumentPanCard();
				 logger.info("Checking Document Name inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentNameInputbox(),"Checking document name inputbox is present or not");
				 logger.info("Document Name inputbox is present");
				 validateNewRemittanceButton.enterDocumentName(faker.name().firstName());
				 logger.info("Checking Document upload Inputbox is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkDocumentUploadBox(),"Checking document upload inputbox is present or not");
				 logger.info("Document upload Inputbox is present");
				 validateNewRemittanceButton.uploadDocumentFromLocal();
				 logger.info("Checking Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkCancelButton(),"Checking document upload page cancel button is present or not");
				 logger.info("Document upload page Cancel button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkUploadButton(),"Checking document upload page upload button is present or not");
				 logger.info("Document upload page Upload button is present");
				 validateNewRemittanceButton.clickUploadButton();
				 
				 logger.info("Checking File Preview button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFilePreviewButton(),"Checking file preview button is present or not");
				 logger.info("File Preview button is present");
				 logger.info("Checking File Delete button is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkFileDeleteButton(),"Checking file delete button is present or not");
				 logger.info("File Delete button is present");
				 logger.info("Checking Sender Declarataion  check box is present");
				 Assert.assertFalse(validateNewRemittanceButton.checkSenderDeclarationCheckbox(),"Checking sender declaration checkbox is present or not");
				 logger.info("Sender Declaration  checkbox is present");
				
				validateNewRemittanceButton.clickSenderDeclarationCheckbox();
				 validateNewRemittanceButton.clickUploadedFileImage();
				 validateNewRemittanceButton.clickClientInfoPageNextButton();
				 logger.info("Checking Recipient info page is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientInfoPage(),"Checking Recipient info page is present or not");
				 logger.info("Recipient info page is present");
				 logger.info("Checking EndBenificiary name box is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryNameBox(),"Checking End benifiaciary name box is present or not");
				 logger.info("End benificiary name box is present");
				 logger.info("Checking End Beneficiary Account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkEndBenificiaryAccountNumBox(),"Checking End benifiaciary account number box is present or not");
				 logger.info("End Beneficiary Account number is present");
				 validateNewRemittanceButton.enterEndBenificiaryName();
				 validateNewRemittanceButton.enterEndBenificiaryAccountNum();
				 logger.info("Checking Recipient Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientDetails(), "Recipient Details","Checking Recipient details header is Present or not");
				 logger.info("Recipient Details  is present");
				 logger.info("Checking Recipient Firstname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientFirstname(), "First Name","Checking Recipient firstname is Present or not");
				 logger.info("Recipient Firstname  is present");
				 logger.info("Checking Recipient Lastname  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientLastname(), "Last Name","Checking Recipient lastname Actions is Present or not");
				 logger.info("Recipient Lastname  is present");
				 logger.info("Checking Recipient Phone number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientPhone(), "Phone","Checking Recipient phone number is Present or not");
				 logger.info("Recipient Phone number  is present");
				 logger.info("Checking Recipient City  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCity(), "City","Checking Recipient city is Present or not");
				 logger.info("Recipient City  is present");
				 logger.info("Checking Recipient Province  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientProvince(), "Province","Checking Recipient province is Present or not");
				 logger.info("Recipient Province  is present");
				 logger.info("Checking Recipient Country  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientCountry(), "Country","Checking Recipient country is Present or not");
				 logger.info("Recipient Country  is present");
				 logger.info("Checking Recipient Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientAddress(), "Address","Checking Recipient address is Present or not");
				 logger.info("Recipient Address  is present");
				 logger.info("Checking Recipient Financial Details  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientFinancialDetails(), "Financial Details","Checking Recipient financial details header is Present or not");
				 logger.info("Recipient Financial Details  is present");
				 logger.info("Checking Recipient Bank name  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankNames(), "Bank Name","Checking Recipient bank name is Present or not");
				 logger.info("Recipient Bank name  is present");
				 logger.info("Checking Recipient Bank Branch  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankBranch(), "Branch","Checking Recipient bank branch is Present or not");
				 logger.info("Recipient Bank Branch  is present");
				 logger.info("Checking Recipient Bank Account number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAcNum(), "Account Number","Checking Recipient bank account number is Present or not");
				 logger.info("Recipient Bank Account number  is present");
				 logger.info("Checking Recipient Bank LEI code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankLEICode(), "LEI Code","Checking Recipient bank LEI code is Present or not");
				 logger.info("Recipient Bank LEI code  is present");
				 logger.info("Checking Recipient Bank IBAN  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIBAN(), "IBAN","Checking Recipient bank IBAN is Present or not");
				 logger.info("Recipient Bank IBAN  is present");
				 logger.info("Checking Recipient Bank Swift BIC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankSwiftBICcode(), "SWIFT BIC Code","Checking Recipient bank swift BIC code is Present or not");
				 logger.info("Recipient Bank Swift BIC code  is present");
				 logger.info("Checking Recipient Bank Transit number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankTransitNum(), "Transit Number","Checking Recipient Transit number is Present or not");
				 logger.info("Recipient Bank Transit number  is present");
				 logger.info("Checking Recipient Bank ABA Routing number  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankABARoutingNum(), "ABA Routing Number","Checking Recipient bank ABA Routing code is Present or not");
				 logger.info("Recipient Bank ABA Routing number  is present");
				 logger.info("Checking Recipient Bank IFSC code  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankIFSCcode(), "IFSC Code","Checking Recipient bank IFSC code is Present or not");
				 logger.info("Recipient Bank IFSC code  is present");
				 logger.info("Checking Recipient Bank Address  is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckRecipientBankAddress(), "Address","Checking Recipient bank address is Present or not");
				 logger.info("Recipient Bank Address  is present");
				 logger.info("Checking Recipient page Back button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoBackButton(),"Checking Recipient info page Back button is Present or not");
				 logger.info("Recipient page Back button  is present");
				 logger.info("Checking Recipient page next button  is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRecipientInfoNextButton(),"Checking Recipient info page Next button is Present or not");
				 logger.info("Recipient page Next button is present");
				 validateNewRemittanceButton.clickRecipientInfoPageNextButton();
				 logger.info("Checking Transfer Details page is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckTransferDetailPage(), "Transfer Details","Checking Transfer Detail page is Present or not");
				 logger.info("Transfer Details page  is present");
				 logger.info("Checking Amount Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAmountToRemitbox(),"Checking amount Remit Box is present or not");
				 logger.info("Amount Remit box is present");
				 logger.info("Checking Currency Remit box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyRemitbox(),"Checking currency Remit Box is present or not");
				 logger.info("Currency Remit box  is present");
				 logger.info("Checking Amount Receive MTO box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckamountToReceivebox(),"Checking amount Receive MTO Box is present or not");
				 logger.info("Amount Receive MTO box  is present");
				 logger.info("Checking Currency Receive box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCurrencyReceivebox(),"Checking currency Receive Box is present or not"); 
				 logger.info("Currency Receive box  is present");
				 logger.info("Checking Operating wallet box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckOperatingWalletbox(),"Checking operating wallet Box is present or not");
				 logger.info("Operating wallet box  is present");
				 validateNewRemittanceButton.enterRecipientMTOBox();
				 validateNewRemittanceButton.enterAmountToRemit();
				 validateNewRemittanceButton.enterOperatingWallet();
				 validateNewRemittanceButton.enterCustomerPaidTypeCash();
				 validateNewRemittanceButton.enterCustomerPaidTypePaypal();
				 validateNewRemittanceButton.enterCustomerPaidTypeOthers();
				 logger.info("Checking Customer Paid Type Other specification box is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckCustomerPaidTypeOtherSpecBox(),"Checking Recipient Customer paid type other specification box is present or not");
				 logger.info("Customer Paid Type Other specification box is present");
				 validateNewRemittanceButton.enterCustomerPaidTypeBank();
				 logger.info("Checking Balance is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalance(),"Checking Balance is present or not");
				 logger.info("Balance is present");
				 logger.info("Checking Balance Amount is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckBalanceAmount(),"Checking Balance Amount is present or not");
				 logger.info("Balance Amount is present");
				 logger.info("Checking Add money button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckAddMoneyButton(),"Checking Add money button is present or not");
				 logger.info("Add money button is present");
				 logger.info("Checking Refresh button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckRefreshButton(),"Checking Refresh buttonis present or not");
				 logger.info("Refresh button is present");
				
				 logger.info("Checking Wallet Balance is present");
				 Assert.assertEquals(validateNewRemittanceButton.CheckWalletBalanceIsDisplayed(), "MTO Balance","Checking wallet balance is present or not");
				 logger.info("Wallet Balance is present");
				/* validateNewRemittanceButton.clickAddMoneyButton();
				 validateNewRemittanceButton.enterAddMoneyFromAmount();
				 validateNewRemittanceButton.enterAddMoneyRemark();
				 validateNewRemittanceButton.clickAddMoneyNextButton();
				 validateNewRemittanceButton.enterUserPassword();
				 validateNewRemittanceButton.clickTransferButton();*/
				 validateNewRemittanceButton.enterSenderMTOFeeAmount();
				 logger.info("Checking Transfer page Cancel  button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageCancelButton(),"Checking Transfer page Cancel Button is present or not");
				 logger.info("Transfer page cancel button is present");
				 logger.info("Checking Transfer page Next button is present");
				 Assert.assertTrue(validateNewRemittanceButton.CheckTransferPageNextButton(),"Checking Transfer page Next Button is present or not");
				 logger.info("Transfer page Next  button is present"); 
				 validateNewRemittanceButton.clickTransferPageNextButton();
				 logger.info("Checking Preview and Submit page is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkPreviewAndSubmitPage(),"Checking Preview and Submit page is present or not");
				 logger.info("Preview and Submit page is present");
				 logger.info("Checking Remittance Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceDetails(),"Checking Remittance details header is present or not");
				 logger.info("Remittance Details is present");
				 logger.info("Checking Remittance Amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceAmount(),"Checking Remittance Amount is present or not");
				 logger.info("Remittance Amount is present");
				 logger.info("Checking Sender MTO fee is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderMTOfee(),"Checking Sender MTO fee is present or not");
				 logger.info("Sender MTO fee is present");
				 logger.info("Checking Remittance total deposit amount is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkTotalDepositAmount(),"Checking Remittance total deposit amount is present or not");
				 logger.info("Remittance total deposit amount  is present");
				 logger.info("Checking Remittance payout is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkAmountPayout(),"Checking Remittance payout is present or not");
				 logger.info("Remittance payout is present");
				 logger.info("Checking Remittance deposit type is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkDepositType(),"Checking Remittance deposit type is present or not");
				 logger.info("Remittance deposit type is present");
				 logger.info("Checking Remittance purpose is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittancePurpose(),"Checking Remittance purpose is present or not");
				 logger.info("Remittance purpose is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkConversionRate(),"Checking Remittance conversion rate is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance conversion rate is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceType(),"Checking Remittance type is present or not");
				 logger.info("Remittance type is present");
				 logger.info("Checking Remittance date is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittaneDate(),"Checking Remittance date is present or not");
				 logger.info("Remittance date is present");
				 logger.info("Checking Remittance created by  is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRemittanceCreatedby(),"Checking Remittance created by is present or not");
				 logger.info("Remittance created by is present");
				 
				
				 logger.info("Checking Sender Details is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailsFinalPreview(),"Checking Sender details header is present or not");
				 logger.info("Sender Details is present");
				 logger.info("Checking Sender Firstname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderBusinessNameFinalPreview(),"Checking firstname of the sender is present or not");
				 logger.info("Sender Firstname is present");
				 logger.info("Checking Sender Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPrimaryContactNameFinalPreview(),"Checking lastname of the sender is present or not");
				 logger.info("Sender Lastname is present");
				 logger.info("Checking Sender Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailPhoneFinalPreview(),"Checking phone number of the sender  is present or not");
				 logger.info("Sender Phonenumber is present");
				 logger.info("Checking Sender City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCityFinalPreview(),"Checking city of the sender is present or not");
				 logger.info("Sender City is present");
				 logger.info("Checking Sender Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailProvinceFinalPreview(),"Checking province of the sender  is present or not");
				 logger.info("Sender Province is present");
				 logger.info("Checking Sender Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailCountryFinalPreview(),"Checking country of the sender is present or not");
				 logger.info("Sender Country is present");
				 logger.info("Checking Sender Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailAddressFinalPreview(),"Checking address of the sender is present or not");
				 logger.info("Sender Address is present");
				 logger.info("Checking Sender Document is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkSenderDetailDocumentsFinalPreview(),"Checking Document of the sender is present or not");
				 logger.info("Sender Document is present");
				 
				 
				 logger.info("Checking Recipient Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientDetailsFinalPreview(),"Checking Recipient details header is present or not");
				 logger.info("Recipient Details is present");
				 logger.info("Checking Recipient Firstname is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientFirstnameFinalPreviewB2P(),"Checking firstname of the Recipient is present or not");
				 logger.info("Recipient Firstname is present");
				 logger.info("Checking Recipient Lastname is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientLastnameFinalPreviewB2P(),"Checking lastname of the Recipient is present or not");
				 logger.info("Recipient Lastname is present");
				 logger.info("Checking Recipient Phonenumber is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientPhoneFinalPreview(),"Checking phone number of the Recipient  is present or not");
				 logger.info("Recipient Phonenumber is present");
				 logger.info("Checking Recipient City is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCityFinalPreview(),"Checking city of the Recipient is present or not");
				 logger.info("Recipient City is present");
				 logger.info("Checking Recipient Province is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientProvinceFinalPreview(),"Checking province of the Recipient  is present or not");
				 logger.info("Recipient Province is present");
				 logger.info("Checking Recipient Country is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientCountryFinalPreview(),"Checking country of the Recipient is present or not");
				 logger.info("Recipient Country is present");
				 logger.info("Checking Recipient Address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientAddressFinalPreview(),"Checking address of the Recipient is present or not");
				 logger.info("Recipient Address is present");
				 
				 logger.info("Checking Financial Details is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkFinancialDetailsFinalPreview(),"Checking Financial details header is present or not");
				 logger.info("Financial Details is present");
				 logger.info("Checking Bank name is present or not");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankNameFinalPreview(),"Checking Bank name of the Recipient is present or not");
				 logger.info("Bank name is present");
				 logger.info("Checking Recipient Bank branch is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkRecipientBankBranchFinalPreview(),"Checking Bank branch of the Recipient is present or not");
				 logger.info("Bank branch is present");
				 logger.info("Checking Bank account number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAcNumFinalPreview(),"Checking Bank account number of the Recipient  is present or not");
				 logger.info("Bank account number is present");
				 logger.info("Checking Bank LEI code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankLEICodeFinalPreview(),"Checking Bank LEI code of the Recipient is present or not");
				 logger.info("Bank LEI code is present");
				 logger.info("Checking Bank IBAN is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIBANFinalPreview(),"Checking Bank IBAN of the Recipient  is present or not");
				 logger.info("Bank IBAN is present");
				 logger.info("Checking Bank swift BIC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankSwiftBICcodeFinalPreview(),"Checking Bank swift BIC code of the Recipient is present or not");
				 logger.info("Bank swift BIC code is present");
				 logger.info("Checking Bank transit number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankTransitNumFinalPreview(),"Checking Bank transit number of the Recipient is present or not");
				 logger.info("Bank transit number is present");	 
				 logger.info("Checking Bank ABA Routing number is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankABARoutingNumFinalPreview(),"Checking Bank ABA Routing number of the Recipient  is present or not");
				 logger.info("Bank ABA Routing number is present");
				 logger.info("Checking Bank IFSC code is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankIFSCcodeFinalPreview(),"Checking Bank IFSC code of the Recipient is present or not");
				 logger.info("Bank IFSC code is present");
				 logger.info("Checking Bank address is present");
				 Assert.assertTrue(validateNewRemittanceButton.checkBankAddressFinalPreview(),"Checking Bank address is present or not");
				 logger.info("Bank address number is present");
				validateNewRemittanceButton.clickConfirmAndSubmitButton();
		 }
		 
}